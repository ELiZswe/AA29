// All the original content belonged to the US Army

#pragma once

#include "CoreMinimal.h"
#include "AA29/Object/Actor/Inventory/Weapon/Weapon.h"
#include "AA29/Object/Actor/BaseWeaponMod/BaseWeaponMod.h"
#include "AA29/Object/Actor/BaseAmmoRound/BaseAmmoRound.h"
#include "AA29/Object/Actor/InventoryAttachment/WeaponAttachment/BaseWeaponAttachment/BaseWeaponAttachment.h"
#include "AA29/AA29.h"
#include "Particles/Emitter.h"
#include "AGP_Weapon.generated.h"

class ALevelInfo;
class UScriptObject;

UCLASS()
class AA29_API AAGP_Weapon : public AWeapon
{
	GENERATED_BODY()
public:
	AAGP_Weapon();

	UPROPERTY()										FRotator rotCoaxWeaponAim;					//var Object.Rotator rotCoaxWeaponAim;
	UPROPERTY()										float fpWeaponThreatLevel;					//var float fpWeaponThreatLevel;
	UPROPERTY()										float PendingChangeWeaponTimeStamp;			//var float PendingChangeWeaponTimeStamp;
	UPROPERTY()										bool bPendingChangeWeapon;					//var bool bPendingChangeWeapon;
	UPROPERTY()										UTexture2D* WeaponImage;					//var Material WeaponImage;
	UPROPERTY(EditAnywhere, BlueprintReadWrite)		float GlobalRecoilScaler;					//var() float GlobalRecoilScaler;
	UPROPERTY()										int32 ElevationIndex;						//var int ElevationIndex;
	UPROPERTY()										TArray<UTexture2D*> ElevationIcon;			//var array<Texture> ElevationIcon;
	UPROPERTY()										TArray<int32> Elevation;					//var array<int> Elevation;
	UPROPERTY()										int32 CurrentElevation;						//var int CurrentElevation;
	UPROPERTY()										int32 AutoPendingShots;						//var int AutoPendingShots;
	UPROPERTY()										int32 BurstPendingShots;					//var int BurstPendingShots;
	UPROPERTY()										int32 FiringCount;							//var int FiringCount;
	UPROPERTY()										bool bRPMReset;								//var bool bRPMReset;
	UPROPERTY()										float FiringTime;							//var float FiringTime;
	UPROPERTY(EditAnywhere, BlueprintReadWrite)		float weapmFov;								//var() float weapmFov;
	UPROPERTY()										float SingleFiringRate;						//var float SingleFiringRate;
	UPROPERTY()										float AutoFiringRate;						//var float AutoFiringRate;
	UPROPERTY()										bool bAllowsPlusOneLoading;					//var bool bAllowsPlusOneLoading;
	UPROPERTY()										bool bWeaponIsOpFor;						//var bool bWeaponIsOpFor;
	UPROPERTY()										bool bBusyLowerWeaponPending;				//var bool bBusyLowerWeaponPending;
	UPROPERTY()										bool bBusyRaiseWeaponPending;				//var bool bBusyRaiseWeaponPending;
	UPROPERTY()										bool bUnZoomASAP;							//var bool bUnZoomASAP;
	UPROPERTY()										bool bInZoom;								//var bool bInZoom;
	UPROPERTY()										bool bZoomDir;								//var bool bZoomDir;
	UPROPERTY()										bool bSuppressorOn;							//var bool bSuppressorOn;
	UPROPERTY()										int32 AutoExtraFireRange;					//var int AutoExtraFireRange;
	UPROPERTY()										int32 AutoExtraFireMin;						//var int AutoExtraFireMin;
	UPROPERTY()										bool bAutoExtraFire;						//var bool bAutoExtraFire;
	UPROPERTY()										AActor*	BlankPlug;							//var Actor BlankPlug;
	UPROPERTY()										AActor* MILESBox;							//var Actor MILESBox;
	UPROPERTY()										bool bAlreadyLoadedMods;					//var bool bAlreadyLoadedMods;
	UPROPERTY()										bool bLoadModsFromPickup;					//var bool bLoadModsFromPickup;
	UPROPERTY()										TArray<FString> WM_Default;					//var string WM_Default;
	UPROPERTY()										int32 num_mods;								//var int num_mods;
	UPROPERTY()										int32 NumSpecialAmmoRounds;					//var int NumSpecialAmmoRounds;
	UPROPERTY()										int32 NumAuxAmmoRound;						//var int NumAuxAmmoRound;
	UPROPERTY()										int32 NumAmmoRounds;						//var int NumAmmoRounds;
	UPROPERTY()										int32 iNextGrenadeType;						//var int iNextGrenadeType;
	UPROPERTY()										FVector _sBlankPlugScale;					//var FVector _sBlankPlugScale;
	UPROPERTY()										FVector _sMILESBoxScale;					//var FVector _sMILESBoxScale;
	UPROPERTY()										FVector _vMILESBoxOffset;					//var FVector _vMILESBoxOffset;
	UPROPERTY()										FString special_tag;						//var string special_tag;
	UPROPERTY()										FString sleeve_tag;							//var string sleeve_tag;
	UPROPERTY()										bool bWpnAccuracy;							//var bool bWpnAccuracy;
	UPROPERTY()										bool bWpnRecoil;							//var bool bWpnRecoil;
	UPROPERTY()										float GuardTimer;							//var float GuardTimer;
	UPROPERTY()										bool bDropping;								//var bool bDropping;
	UPROPERTY()										int32 _iSupportPosX;						//var int _iSupportPosX;
	UPROPERTY()										int32 _iSupportSize;						//var int _iSupportSize;
	UPROPERTY()										int32 _iOldSizeY;							//var int _iOldSizeY;
	UPROPERTY()										int32 _iOldSizeX;							//var int _iOldSizeX;
	UPROPERTY()										float fExplodeRadius;						//var float fExplodeRadius;
	UPROPERTY()										int32 iExplodeDamage;						//var int iExplodeDamage;
	UPROPERTY()										float fExplodePct;							//var float fExplodePct;
	UPROPERTY()										float fRuinedPct;							//var float fRuinedPct;
	UPROPERTY()										int32 MaxClips;								//var int MaxClips;
	UPROPERTY()										float dValue;								//var float dValue;
	UPROPERTY()										FName _nScopeBone;							//var name _nScopeBone;
	UPROPERTY()										bool bDebugSights;							//var bool bDebugSights;
	UPROPERTY()										bool bCanUse3dSights;						//var bool bCanUse3dSights;
	UPROPERTY()										float FiringTweenTime;						//var float FiringTweenTime;
	UPROPERTY()										float AnimTimerDuration;					//var float AnimTimerDuration;
	UPROPERTY()										float AuxfZoomAnimFOV;						//var float AuxfZoomAnimFOV;
	UPROPERTY()										FName AuxSupportedZoomOutAnim;				//var name AuxSupportedZoomOutAnim;
	UPROPERTY()										FName AuxSupportedZoomInAnim;				//var name AuxSupportedZoomInAnim;
	UPROPERTY()										FName AuxZoomOutAnim;						//var name AuxZoomOutAnim;
	UPROPERTY()										FName AuxZoomInAnim;						//var name AuxZoomInAnim;
	UPROPERTY()										FName AuxSupportedZoomIdleAnim;				//var name AuxSupportedZoomIdleAnim;
	UPROPERTY()										FName AuxZoomIdleAnim;						//var name AuxZoomIdleAnim;
	UPROPERTY()										FName SupportedZoomIdleAnim;				//var name SupportedZoomIdleAnim;
	UPROPERTY()										TArray<FName> ZoomIdleAnim;					//var name ZoomIdleAnim;
	UPROPERTY()										FName ProneReloadFullAnim;					//var name ProneReloadFullAnim;
	UPROPERTY()										FName ProneReloadEmptyAnim;					//var name ProneReloadEmptyAnim;
	UPROPERTY()										FName ReloadFullAnim;						//var name ReloadFullAnim;
	UPROPERTY()										FName ReloadEmptyAnim;						//var name ReloadEmptyAnim;
	UPROPERTY()										TArray<FName> AuxSupportedZoomFireAnims;	//var name AuxSupportedZoomFireAnims;
	UPROPERTY()										TArray<FName> AuxZoomFireAnims;				//var name AuxZoomFireAnims;
	UPROPERTY()										TArray<FName> SupportedZoomFireAnims;		//var name SupportedZoomFireAnims;
	UPROPERTY()										TArray<FName> ZoomFireAnims;				//var name ZoomFireAnims;
	UPROPERTY()										TArray<FName> SupportedFireAnims;			//var name SupportedFireAnims;
	UPROPERTY()										TArray<FName> FireAnims;					//var name FireAnims;
	UPROPERTY()										USoundBase* SuppressorOffSound;				//var Sound SuppressorOffSound;
	UPROPERTY()										USoundBase* SuppressorOnSound;				//var Sound SuppressorOnSound;
	UPROPERTY()										USoundBase* AltReloadSound;					//var Sound AltReloadSound;
	UPROPERTY()										USoundBase* ProneReloadFullSound;			//var Sound ProneReloadFullSound;
	UPROPERTY()										USoundBase* ReloadFullSound;				//var Sound ReloadFullSound;
	UPROPERTY()										USoundBase* ReloadEndSound;					//var Sound ReloadEndSound;
	UPROPERTY()										USoundBase* ReloadStartSound;				//var Sound ReloadStartSound;
	UPROPERTY()										USoundBase* DryFireSound;					//var Sound DryFireSound;
	UPROPERTY()										USoundBase* UnSupportingSound;				//var Sound UnSupportingSound;
	UPROPERTY()										USoundBase* SupportingSound;				//var Sound SupportingSound;
	UPROPERTY()										USoundBase* SelectChargeSound;				//var Sound SelectChargeSound;
	UPROPERTY()										USoundBase* ChangeFireSound;				//var Sound ChangeFireSound;
	UPROPERTY()										USoundBase* ProneFixJamSound;				//var Sound ProneFixJamSound;
	UPROPERTY()										USoundBase* FixJamSound;					//var Sound FixJamSound;
	UPROPERTY()										USoundBase* ProneReloadSound;				//var Sound ProneReloadSound;
	UPROPERTY()										USoundBase* ReloadSound;					//var Sound ReloadSound;
	UPROPERTY()										USoundBase* AuxOutdoorSingleFire;			//var Sound AuxOutdoorSingleFire;
	UPROPERTY()										USoundBase* AuxSingleFire;					//var Sound AuxSingleFire;
	UPROPERTY()										USoundBase* SuppressedOutdoorSingleFire;	//var Sound SuppressedOutdoorSingleFire;
	UPROPERTY()										USoundBase* SuppressedSingleFire;											//var Sound SuppressedSingleFire;
	UPROPERTY()										USoundBase* OutdoorSingleFire;												//var Sound OutdoorSingleFire;
	UPROPERTY()										USoundBase* SingleFire;														//var Sound SingleFire;
	UPROPERTY()										bool bUseAnimNotifySounds;													//var bool bUseAnimNotifySounds;
	UPROPERTY()										int32 ConsecutiveShots;														//var int ConsecutiveShots;
	UPROPERTY()										int32 ShotsForMaxRecoil;													//var int ShotsForMaxRecoil;
	UPROPERTY()										int32 ShotsToStartRecoilBlend;												//var int ShotsToStartRecoilBlend;
	UPROPERTY()										bool bUseAutoRecoil;														//var bool bUseAutoRecoil;
	UPROPERTY()										FVector ProneFireOffset;													//var FVector ProneFireOffset;
	UPROPERTY()										float RapidMisFireRand;														//var float RapidMisFireRand;
	UPROPERTY()										float RapidMisFirePct;														//var float RapidMisFirePct;
	UPROPERTY()										int32 RapidFireShotsNeeded;													//var int RapidFireShotsNeeded;
	UPROPERTY()										int32 RapidFireShots;														//var int RapidFireShots;
	UPROPERTY()										int32 iPendingShots;														//var int iPendingShots;
	UPROPERTY()										bool _bWeaponAlreadyRaised;													//var bool _bWeaponAlreadyRaised;
	UPROPERTY()										bool _bActive;																//var bool _bActive;
	UPROPERTY()										bool _bCanBeMiles;															//var bool _bCanBeMiles;
	UPROPERTY()										bool _bCharged;																//var bool _bCharged;
	UPROPERTY()										float _fHitNoise;															//var float _fHitNoise;
	UPROPERTY()										float _fShotNoise;															//var float _fShotNoise;
	UPROPERTY()										float BaseRecoilModifier;													//var float BaseRecoilModifier;
	UPROPERTY()										float BaseAccuracyModifier;													//var float BaseAccuracyModifier;
	UPROPERTY()										EStatWeaponType StatWeaponType;												//var Actor.EStatWeaponType StatWeaponType;
	//UPROPERTY(EditAnywhere, BlueprintReadWrite)	AScriptedTexture* ScopeScriptedTexture;									//var() ScriptedTexture ScopeScriptedTexture;
	UPROPERTY()										AAGP_Weapon* EnemyWeaponClass;												//var class<AGP_Weapon> EnemyWeaponClass;
	UPROPERTY()										ABaseWeaponMod* LegalModList;												//var array<class<BaseWeaponMod> > LegalModList;
	UPROPERTY()										ABaseWeaponMod* WeaponModList;												//var BaseWeaponMod WeaponModList;
	UPROPERTY()										TSubclassOf<class ABaseMuzzleFlashEmitter> SavedMuzzleFlashEmitter;			//var AGP_Effects.BaseMuzzleFlashEmitter SavedMuzzleFlashEmitter;
	UPROPERTY()										UStaticMesh* NrmFireMesh;													//var Mesh NrmFireMesh;
	UPROPERTY()										USkeletalMesh* AuxFireMesh;													//var Mesh AuxFireMesh;
	UPROPERTY()										ERateofFire AuxROF;															//var Weapon.RateofFire AuxROF;
	UPROPERTY()										ERateofFire LastROF;														//var Weapon.RateofFire LastROF;
	UPROPERTY()										TSubclassOf<class ABaseAmmoRound> SpecialAmmoRoundList;						//var BaseAmmoRound SpecialAmmoRoundList;
	UPROPERTY()										TSubclassOf<class ABaseAmmoRound> SpecialAmmoRoundClass;					//var class<BaseAmmoRound> SpecialAmmoRoundClass;
	UPROPERTY()										TSubclassOf<class ABaseAmmoRound> AuxAmmoRoundList;							//var BaseAmmoRound AuxAmmoRoundList;
	UPROPERTY()										TSubclassOf<class ABaseAmmoRound> AuxAmmoRoundClass;						//var class<BaseAmmoRound> AuxAmmoRoundClass;
	UPROPERTY()										TSubclassOf<class ABaseAmmoRound> AmmoRoundList;							//var BaseAmmoRound AmmoRoundList;
	UPROPERTY()										TSubclassOf<class ABaseAmmoRound> AmmoRoundClass;							//var class<BaseAmmoRound> AmmoRoundClass;
	UPROPERTY()										TSubclassOf<class ABaseMuzzleFlashEmitter>  SuppressedMuzzleFlashEmitter;	//var AGP_Effects.BaseMuzzleFlashEmitter SuppressedMuzzleFlashEmitter;
	UPROPERTY()										FBoneOffset _FPSuppressedMuzzleFlashOffset;									//var Object.BoneOffset _FPSuppressedMuzzleFlashOffset;
	UPROPERTY()										TSubclassOf<class AAA2_Emitter>  _FPSuppressedMuzzleFlashClass;				//var class<Emitter> _FPSuppressedMuzzleFlashClass;
	UPROPERTY()										TSubclassOf<class ABaseMuzzleFlashEmitter> AuxMuzzleFlashEmitter;			//var AGP_Effects.BaseMuzzleFlashEmitter AuxMuzzleFlashEmitter;
	UPROPERTY()										FBoneOffset _FPAuxMuzzleFlashOffset;										//var Object.BoneOffset _FPAuxMuzzleFlashOffset;
	UPROPERTY()										TSubclassOf<class AAA2_Emitter> _FPAuxMuzzleFlashClass;						//var class<Emitter> _FPAuxMuzzleFlashClass;
	UPROPERTY()										TSubclassOf<class ABaseMuzzleFlashEmitter>  NormalMuzzleFlashEmitter;		//var AGP_Effects.BaseMuzzleFlashEmitter NormalMuzzleFlashEmitter;
	UPROPERTY()										FBoneOffset _FPMuzzleFlashOffset;											//var Object.BoneOffset _FPMuzzleFlashOffset;
	UPROPERTY()										TSubclassOf<class AAA2_Emitter> _FPMuzzleFlashClass;						//var class<Emitter> _FPMuzzleFlashClass;
	UPROPERTY()										TSubclassOf<class ABaseMuzzleFlashEmitter> _FPMuzzleFlashEmitter;			//var AGP_Effects.BaseMuzzleFlashEmitter _FPMuzzleFlashEmitter;
	UPROPERTY()										TSubclassOf<class AAA2_Emitter> ExplosionType;								//var class<Emitter> ExplosionType;
	UPROPERTY()										TSubclassOf <class UDamageType> RadiusDamageType;							//var class<DamageType> RadiusDamageType;
	UPROPERTY()										TSubclassOf <class UDamageType> OwnerDamageType;							//var class<DamageType> OwnerDamageType;
	UPROPERTY()										TSubclassOf<class ABaseScope> _cScopeClass;									//var class<BaseScope> _cScopeClass;
	UPROPERTY()										APawn* dEnemy;																//var Pawn dEnemy;
	UPROPERTY()										EContactSpecialWeapons Type;												//var Actor.EContactSpecialWeapons Type;
	UPROPERTY()										ABaseScope* _Scope;															//var BaseScope _Scope;
	UPROPERTY()										FRotationRandomizer _AutoRecoilDirInfo;										//var Object.RotationRandomizer _AutoRecoilDirInfo;
	UPROPERTY()										FRotationRandomizer _RecoilDirInfo;											//var Object.RotationRandomizer _RecoilDirInfo;
	UPROPERTY()										UScriptObject* _JammedMonitor;												//var ScriptObject _JammedMonitor;
	UPROPERTY()										UScriptObject* _AmmoMonitor;												//var ScriptObject _AmmoMonitor;
	UPROPERTY()										TSubclassOf<class AInventory>  _cMILESAltClass;								//var class<Inventory> _cMILESAltClass;

	void InterpolateZoomView(bool moveToZoomed);
	void Strawberry();
	void DisplayDebug(class UCanvas* Canvas, const class FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos);
	void ClientGotoState(FName NewState, FName NewLabel);
	void StaticPrecache(ALevelInfo* L);
	void PreBeginPlay();
	void PostBeginPlay();
	void Destroyed();
	void BeginPlay();
	bool ShouldUse3dSights();
	FVector Get3dScopeLocation();
	FRotator Get3dScopeRotation();
	void ServerJamit();
	void AttachToPawn(APawn* p);
	FVector GetFireStart(FVector X, FVector Y, FVector Z);
	FVector NPC_GetFireStart(FVector X, FVector Y, FVector Z);
	void RenderOverlays(UCanvas* Canvas, bool bWeaponAndAttachmentsOnly);
	//void RenderTexture(ScriptedTexture Tex);
	FRotator AdjustAim(bool bBreatheBonus);
	float GetWeightedAim();
	void ServerFire(bool bNoAdjustAim, bool bRapid, bool bBreatheBonus);
	void NPC_ServerFire(bool bNoAdjustAim, bool bRapid, bool bBreatheBonus, APawn* Enemy, float Value);
	void LocalFire();
	void NPC_LocalFire();
	void ProjectileBackBlast(FVector Forward, FVector Right, FVector Up);
	void ProjectileFire();
	void NPC_ProjectileFire();
	void TraceFire(float Accuracy, float YOffset, float ZOffset);
	FRotator GetFireRot();
	void NPC_TraceFire(float Accuracy, float YOffset, float ZOffset);
	float GetPenetrationPercent(AActor* A, UTexture2D* M);
	float GetRicochetThreshold(AActor* A, UTexture2D* M);
	FVector GetRicochetDirection(FVector TraceDirection, FVector HitNormal, float CosTheta);
	FVector GetPenetrateDirection(FVector TraceDirection, float fStrength);
	float GetPenetrateStrength(AActor* TraceFrom, FVector StartTrace, FVector EndTrace, float fStrength);
	bool CanTraceMore(ABaseWeaponAttachment* BA, int32 num_traces);
	int32 DoTrace(AActor* TraceFrom, FVector StartTrace, FVector TraceDirection, float fTraceDistance, float fStrength, int32 num_traces, ABaseWeaponAttachment* BA, bool btestdepth);
	int32 NPC_DoTrace(AActor* TraceFrom, FVector StartTrace, FVector TraceDirection, float fTraceDistance, float fStrength, int32 num_traces, ABaseWeaponAttachment* BA, bool btestdepth);
	bool RepeatFire();
	void CheckRapidMisfire(bool bRapid);
	void CalcNextMisFire();
	void ClientSendNextMisFire(int32 NextW, float Rand);
	void ServerRequestMisFireInfo();
	void HandleMisFire();
	void ClientHandleMisfire();
	void IncreaseElevation();
	void DecreaseElevation();
	void ZeroElevation();
	void ServerSetElevation(int32 NewElevation);
	void SetGuerrillaWeapon(bool newGuerrillaWeap);
	void AttachToBack();
	void GiveTo(APawn* Other, APickup* Pickup);
	void SpawnAndAttachScope();
	void OwnerRecieved();
	bool IsLegalMod(ABaseWeaponMod* cmod);
	void LoadWeaponMods();
	void SetupModAttachments();
	FString GetWeaponModName(int32 i);
	void LoadDefaultMods();
	void CreateWeaponMod(FString nameWM, int32 Slot);
	void AddWeaponMod(ABaseWeaponMod* WM);
	void NotifyWeaponModAnimations(FName Sequence, float Rate, float TweenTime, bool bLoop);
	void NotifyWeaponModZoom();
	void UpdateCurrentAmmoRounds(bool bRoundInBreech);
	ABaseAmmoRound* SpawnSingleAmmoRound(bool bAux, int32 ammo_id, bool bSpecial);
	void SpawnAndAttachAmmoRounds();
	void SpawnAndAttachMILESGear();
	bool IsReplicationComplete();
	void NotifyReplicationComplete();
	void SetupClientWeapon();
	void SpawnMuzzleFlash();
	void SetWeaponSkins();
	FString GetActorLevelSkin(int32 Index, UTexture2D* old_material, FString level_tag);
	FString GetSleeve(bool bFriendly);
	void GiveAmmo(APawn* p);
	virtual void RecountAmmo() override;
	void TravelPostAccept();
	int32 GetPendingShots();
	virtual void Fire(float Value) override;
	void NPC_Fire(float Value, APawn* Enemy);
	virtual void AltFire(float Value) override;
	void StartCrawling();
	void StopCrawling();
	void SetSupported(bool newSupported);
	void ServerSetSupported(bool newSupported);
	void ServerNotifyReplicationComplete();
	virtual void ChangeFireMode() override;
	void ServerChangeFireMode();
	virtual void FixJam() override;
	void ServerFixJam();
	virtual void Reload() override;
	void TempLowerWeapon(bool bActive);
	void ClientTempLowerWeapon(bool bActive);
	void TempRaiseWeapon();
	void GuardWeapon();
	ABaseWeaponMod* GetSuppressor();
	bool IsSuppressed();
	void ToggleSuppressor();
	void ServerToggleSuppressor();
	void DoSuppressor(bool bNewSuppressor);
	void PlaySuppressor();
	void ToggleLeftRail();
	void ToggleRightRail();
	bool CanZoom();
	FRotator CalcZoomWander();
	void CycleZoom();
	void ToggleZoom();
	void ForceUnzoom(bool bForce);
	void ServerZoom(bool bNewZoomDir);
	void DoZoom(bool DoZoomDir);
	virtual void UnZoom() override;
	virtual void Zoom() override;
	bool virtual IsZoomed();
	bool ShouldBreatheCycle();
	float GetZoomMultiplier();
	bool IsCharged();
	virtual bool IsJammed();
	bool IsOpFor();
	void Finish();
	void ClientFinish();
	void Tick(float DeltaTime);
	bool CanUseWeapon(int32 DesiredAction);
	virtual bool CanSprint() override;
	bool CanCombatRoll(bool bActual);
	EUpperBodyAnim GetUpperBodyLowerAnim();
	EUpperBodyAnim GetUpperBodyRaiseAnim();
	EUpperBodyAnim GetUpperBodyReadyAnim();
	AInventory* GetSwapContainer();
	void ForceTempRaiseWeapon();
	virtual bool IsBusy() override;
	EContactSpecialWeapons getMyType();
	void SetFastMove(bool fast);
	bool ShouldDrawCrosshair();
	FString getROFString();
	float GetBreatheMultiplier();
	float AmmoStatus();
	void HasAmmo();
	void NotifyOutOfAmmo();
	UScriptObject* GetAmmoMonitor();
	void SetAmmoMonitor(UScriptObject* sobj);
	void NotifyJammed();
	UScriptObject* GetJammedMonitor();
	void SetJammedMonitor(UScriptObject* sobj);
	virtual void BringUp() override;
	void ClientBringUp();
	virtual bool PutDown() override;
	void ClientPutDown();
	virtual void DoChangeFireMode();
	void DoChangeFireModeAux();
	void DoChangeFireModeLast();
	void DoFixJam();
	void DoSupported();
	AActor* GetSoundActor();
	void PlayWeaponSound(USoundBase* pSound, USoundBase* esound, float Volume, float Radius);
	void ServerDryFire();
	void DryFire();
	void PlayDryFire();
	void AnimEnd(int32 Channel);
	virtual void PlayIdleAnim() override;
	AActor* GetAnimActor();
	void RunAnimation(FName Sequence, float Rate, float TweenTime, bool bLoop);
	void NotifyWeaponAttachmentAnimations(FName Sequence, float Rate, float TweenTime, bool bLoop);
	USoundBase* GetFireSound();
	USoundBase* GetEnemyFireSound();
	bool GetSpecialFireAnim(FName SpecialAnimName);
	virtual void PlayFiring() override;
	void HandleRecoil();
	void NPC_PlayFiring();
	virtual void PlayReloading() override;
	void PlayChangeFireMode();
	void PlayFixJam();
	void PlaySupporting();
	virtual void PlaySelect() override;
	virtual void TweenDown() override;
	void PlayHighCrawlIn();
	void PlayCrawl();
	void PlayHighCrawlOut();
	void SetupAuxWeaponMesh(USkeletalMesh* new_mesh, USkeletalMesh* new_aux_mesh);
	void SetupAuxAmmoRound(ABaseAmmoRound* new_aux_round, int32 new_num_aux);
	void SetupAuxAmmo(AAmmunition* new_aux_ammo, int32 new_aux_pcount);
	void SetupAuxMuzzleFlash(AEmitter* new_muzzle, FBoneOffset new_offset);
	void SetupAuxSounds(USoundBase* new_fire, USoundBase* new_outdoor_fire, USoundBase* new_reload);
	void SelectAuxFireMode();
	void SelectNormalMode();
	void FailedSupported();
	void ChangeAuxMode(ENewAuxMode new_mode);
	void ServerChangeAuxMode(ENewAuxMode new_mode);
	void UpdateSpecialAttachment(bool bRenderAttachment);
	void SetupMuzzleFlash();
	void IncrementFlashCount();
	void NotifyAddAmmo(AAmmunition* NewAmmo);
	void NotifyDeleteAmmo(AAmmunition* OldAmmo);
	bool WeaponDisabled();
	float GetMinimumRange();
	float GetOptimalRange();
	float GetMaximumRange();
	TSubclassOf<AAmmunition> GetCurrentAmmoName();
	AAmmunition* GetCurrentAmmoType();
	void SetCurrentAmmoType(AAmmunition* newAmmoType);
	void SetCurrentAmmoName(AAmmunition* newAmmoName);
	TSubclassOf<AAmmunition> GetAuxAmmoName();
	AAmmunition* GetAuxAmmoType();
	virtual int32 GetClipCount(uint8 clip, bool bAuxAmmo) override;
	void SetClipCount(uint8 clip, int32 Count, bool bAuxAmmo);
	uint8 GetBestClip();
	virtual bool CheckForNoReload() override;
	bool OutOfAmmo();
	virtual bool SingleShotWeapon();
	void ReloadClip(uint8 newclip);
	bool AddClip(AAmmunition* AmmoClass);
	bool ValidAmmo(TSubclassOf<AAmmunition> AmmoClass);
	AAmmunition* SpawnAmmoFor(AAGP_Weapon* OldW, AAmmunition* oldA);
	bool IsLegalROF(ERateofFire testROF);
	void CopyROF(AAGP_Weapon* W);
	void InitFor(AInventory* Inv);
	void CopyWeaponMods(AAGP_Weapon* W);
	int32 GetClipCountAllowed(int32 new_clip, AAmmunition* test_ammo);
	void FixRuinedJam();
	void NPC_SetEnemy(APawn* Enemy);
	APawn* NPC_GetEnemy();
	void NPC_SetValue(float Value);
	void MatchEnding();
};
