// All the original content belonged to the US Army

#pragma once

#include "CoreMinimal.h"
#include "AA29/Object/Actor/Pawn/AA2_Pawn.h"
#include "AA29/AA29.h"
#include "Vehicle.generated.h"

class UaDamageType;
class AVehicleReplicationInfo;
class AProjectile;
class ASVehicleFactory;

//class AAIMarker;

UCLASS(Config = Game)
class AA29_API AVehicle : public AAA2_Pawn
{
	GENERATED_BODY()

public:
	// Sets default values for this pawn's properties
	AVehicle();

	UPROPERTY()						TArray<APawn*>				OtherVehicles;										//var array<Pawn> OtherVehicles;
	UPROPERTY()						bool						bAIDriversOnly;										//var bool bAIDriversOnly;
	UPROPERTY()						AVehicleReplicationInfo*	VehicleReplicationInfoClass;						//var class<VehicleReplicationInfo> VehicleReplicationInfoClass;
	UPROPERTY()						AVehicleReplicationInfo*	VehicleReplicationInfo;								//var VehicleReplicationInfo VehicleReplicationInfo;
	UPROPERTY()						float						RecoilImpulse;										//var float RecoilImpulse;
	UPROPERTY()						bool						bSusceptibleToSmallArms;							//var bool bSusceptibleToSmallArms;
	UPROPERTY()						float						fpRealAltitude;										//var float fpRealAltitude;
	UPROPERTY()						bool						bUAVHoverLands;										//var bool bUAVHoverLands;
	UPROPERTY()						bool						bUAVEngineOn;										//var bool bUAVEngineOn;
	UPROPERTY()						bool						bIsUAV;												//var bool bIsUAV;
	UPROPERTY()						bool						bIsHelicopter;										//var bool bIsHelicopter;
	UPROPERTY()						float						fpHelicopterRudder;									//var float fpHelicopterRudder;
	UPROPERTY()						float						fpHelicopterCyclicRoll;								//var float fpHelicopterCyclicRoll;
	UPROPERTY()						float						fpHelicopterCyclicPitch;							//var float fpHelicopterCyclicPitch;
	UPROPERTY()						float						fpHelicopterCollective;								//var float fpHelicopterCollective;
	UPROPERTY()						FSVehicleIcon				VehicleIcon;										//var SVehicleIcon VehicleIcon;
	UPROPERTY()						int32						VehicleNumber;										//var int VehicleNumber;
	UPROPERTY(EditAnywhere)			UMaterialInstance*			SpawnOverlay;										//var() Material SpawnOverlay;
	UPROPERTY(EditAnywhere)			float						HUDOverlayFOV;										//var() float HUDOverlayFOV;
	UPROPERTY(EditAnywhere)			FVector						HUDOverlayOffset;									//var() Object.Vector HUDOverlayOffset;
	UPROPERTY()						AActor*						HudOverlay;											//var Actor HudOverlay;
	UPROPERTY()						AActor*						HUDOverlayClass;									//var class<Actor> HUDOverlayClass;
	UPROPERTY()						UaDamageType*				VehicleDrowningDamType;								//var class<DamageType> VehicleDrowningDamType;
	UPROPERTY(EditAnywhere)			float						WaterDamage;										//var() float WaterDamage;
	UPROPERTY(EditAnywhere)			TArray<USoundBase*>			BulletSounds;										//var() array<Sound> BulletSounds;
	UPROPERTY()						float						LastHornTime;										//var float LastHornTime;
	UPROPERTY()						TArray<USoundBase*>			 HornSounds;										//var array<Sound> HornSounds;
	UPROPERTY()						USoundBase*					SeatbeltSound;										//var Sound SeatbeltSound;
	UPROPERTY()						bool						bWearingSeatbelt;									//var bool bWearingSeatbelt;
	UPROPERTY()						float						WheelsScale;										//var float WheelsScale;
	UPROPERTY()						FRotator						FlagRotation;									//var Object.Rotator FlagRotation;
	UPROPERTY()						FVector						FlagOffset;											//var Object.Vector FlagOffset;
	UPROPERTY()						FName						FlagBone;											//var name FlagBone;
	UPROPERTY()						float						ObjectiveGetOutDist;								//var float ObjectiveGetOutDist;
	UPROPERTY()						float						AIMoveCheckTime;									//var const float AIMoveCheckTime;
	UPROPERTY()						float						MaxDesireability;									//var float MaxDesireability;
	UPROPERTY()						float						PlayerStartTime;									//var float PlayerStartTime;
	UPROPERTY()						float						TeamUseTime;										//var float TeamUseTime;
	UPROPERTY()						float						VehicleLostTime;									//var float VehicleLostTime;
	UPROPERTY()						float						OldSteering;										//var float OldSteering;
	UPROPERTY()						float						LinkHealMult;										//var float LinkHealMult;
	UPROPERTY()						USoundBase*					StolenSound;										//var Sound StolenSound;
	UPROPERTY()						FName						StolenAnnouncement;									//var name StolenAnnouncement;
	UPROPERTY()						USoundBase*					RanOverSound;										//var Sound RanOverSound;
	UPROPERTY()						UaDamageType*				CrushedDamageType;									//var class<DamageType> CrushedDamageType;
	UPROPERTY()						UaDamageType*				RanOverDamageType;									//var class<DamageType> RanOverDamageType;
	UPROPERTY()						float						MinRunOverSpeed;									//var float MinRunOverSpeed;
//	UPROPERTY()						AAIMarker*					myMarker;											//var AIMarker myMarker;
	UPROPERTY()						UMaterialInstance*			TeamBeaconBorderMaterial;							//var Material TeamBeaconBorderMaterial;
	UPROPERTY()						UMaterialInstance*			NoEntryTexture;										//var Texture NoEntryTexture;
	UPROPERTY()						UMaterialInstance*			TeamBeaconTexture;									//var Texture TeamBeaconTexture;
	UPROPERTY()						FString						VehicleDescription;									//var localized string VehicleDescription;
	UPROPERTY()						FString						VehicleNameString;									//var localized string VehicleNameString;
	UPROPERTY()						FString						VehiclePositionString;								//var localized string VehiclePositionString;
	UPROPERTY()						AVehicle*					NextVehicle;										//var Vehicle NextVehicle;
	UPROPERTY()						float						LockWarningInterval;								//var float LockWarningInterval;
	UPROPERTY()						float						LastLockWarningTime;								//var float LastLockWarningTime;
	UPROPERTY()						FString						LockOnClassString;									//var string LockOnClassString;
	UPROPERTY()						float						DriverDamageMult;									//var float DriverDamageMult;
	UPROPERTY()						float						MomentumMult;										//var float MomentumMult;
	UPROPERTY()						float						ShadowCullDistance;									//var float ShadowCullDistance;
	UPROPERTY()						float						ShadowMaxTraceDist;									//var float ShadowMaxTraceDist;
	//UPROPERTY()						AShadowProjector*			VehicleShadow;										//var ShadowProjector VehicleShadow;
	UPROPERTY()						FString						TransEffects;										//var string TransEffects;
	UPROPERTY()						ASVehicleFactory*			ParentFactory;										//var SVehicleFactory ParentFactory;
	UPROPERTY()						APawn*						Driver;												//var Pawn Driver;
	UPROPERTY(EditAnywhere)			float						Predict_Collision_Distance;							//var() float Predict_Collision_Distance;
	UPROPERTY(EditAnywhere)			bool						bPredict_Collision_MoveToward;						//var() bool bPredict_Collision_MoveToward;
	UPROPERTY(EditAnywhere)			int32						MaxViewPitch;										//var() int MaxViewPitch;
	UPROPERTY(EditAnywhere)			int32						MaxViewYaw;											//var() int MaxViewYaw;
	UPROPERTY(EditAnywhere)			FRange					TPCamDistRange;											//var() Object.Range TPCamDistRange;
	UPROPERTY()						float						CameraSpeed;										//var float CameraSpeed;
	UPROPERTY()						float						LastCameraCalcTime;									//var float LastCameraCalcTime;
	UPROPERTY()						float						DesiredTPCamDistance;								//var float DesiredTPCamDistance;
	UPROPERTY(EditAnywhere)			FVector						TPCamWorldOffset;									//var() Object.Vector TPCamWorldOffset;
	UPROPERTY(EditAnywhere)			FVector						TPCamLookat;										//var() Object.Vector TPCamLookat;
	UPROPERTY()						int32						CenterSpringRangeRoll;								//var int CenterSpringRangeRoll;
	UPROPERTY()						int32						CenterSpringRangePitch;								//var int CenterSpringRangePitch;
	UPROPERTY()						FString						CenterSpringForce;									//var string CenterSpringForce;
	UPROPERTY(config)				float						TPCamDistance;										//var config float TPCamDistance;
	UPROPERTY(EditAnywhere)			FVector						FPCamViewOffset;									//var() Object.Vector FPCamViewOffset;
	UPROPERTY(EditAnywhere)			FVector						FPCamPos;											//var() Object.Vector FPCamPos;
	UPROPERTY()						bool						bFPCamPosDirty;										//var bool bFPCamPosDirty;
	UPROPERTY(EditAnywhere)			float						EntryRadius;										//var() float EntryRadius;
	UPROPERTY(EditAnywhere)			FVector						EntryPosition;										//var() Object.Vector EntryPosition;
	UPROPERTY(EditAnywhere)			TArray<FVector>				ExitPositions;										//var() array<Vector> ExitPositions;
	UPROPERTY(EditAnywhere)			FRotator					DriverRotOffset;									//var() Object.Rotator DriverRotOffset;
	UPROPERTY(EditAnywhere)			FVector						DriverPosOffset;									//var() Object.Vector DriverPosOffset;
	UPROPERTY(EditAnywhere)			bool						bCustomAttach;										//var() bool bCustomAttach;
	UPROPERTY(EditAnywhere)			bool						bPlayDrivingAnimations;								//var() bool bPlayDrivingAnimations;
	UPROPERTY(EditAnywhere)			FName						DriveAnim;											//var() name DriveAnim;
	UPROPERTY(EditAnywhere)			FRotator					DriveRot;											//var() Object.Rotator DriveRot;
	UPROPERTY(EditAnywhere)			FVector						DrivePos;											//var() Object.Vector DrivePos;
	UPROPERTY(EditAnywhere)			FName						DriverBone;											//var() name DriverBone;
	UPROPERTY()						float						VehicleMovingTime;									//var float VehicleMovingTime;
	UPROPERTY()						float						StuckTime;											//var float StuckTime;
	UPROPERTY()						float						ThrottleTime;										//var float ThrottleTime;
	UPROPERTY()						int32						DriverViewYaw;										//var int DriverViewYaw;
	UPROPERTY()						int32						DriverViewPitch;									//var int DriverViewPitch;
	UPROPERTY(EditAnywhere)			float						Rise;												//var() float Rise;
	UPROPERTY(EditAnywhere)			float						Throttle;											//var() float Throttle;
	UPROPERTY(EditAnywhere)			float						Steering;											//var() float Steering;
	UPROPERTY()						AController*				AutoTurretControllerClass;							//var class<Controller> AutoTurretControllerClass;
	UPROPERTY()						float						EjectMomentum;										//var float EjectMomentum;
	UPROPERTY()						FRotator					PlayerEnterredRotation;								//var Object.Rotator PlayerEnterredRotation;
	UPROPERTY()						uint8						PrevTeam;											//var byte PrevTeam;
	UPROPERTY()						uint8						OldTeam;											//var byte OldTeam;
	UPROPERTY(EditAnywhere)			uint8						Team;												//var() byte Team;
	UPROPERTY()						uint8						StuckCount;											//var byte StuckCount;
	UPROPERTY(EditAnywhere)			bool						bFPNoZFromCameraPitch;								//var() bool bFPNoZFromCameraPitch;
	UPROPERTY()						bool						bSpawnProtected;									//var bool bSpawnProtected;
	UPROPERTY()						bool						bCanCarryFlag;										//var bool bCanCarryFlag;
	UPROPERTY()						bool						bDriverHoldsFlag;									//var bool bDriverHoldsFlag;
	UPROPERTY()						bool						bShowChargingBar;									//var bool bShowChargingBar;
	UPROPERTY()						bool						bHideRemoteDriver;									//var bool bHideRemoteDriver;
	UPROPERTY(config)				bool						bDesiredBehindView;									//var config bool bDesiredBehindView;
	UPROPERTY()						bool						bEnemyLockedOn;										//var bool bEnemyLockedOn;
	UPROPERTY()						bool						bAdjustDriversHead;									//var bool bAdjustDriversHead;
	UPROPERTY(EditAnywhere)			bool						bHighScoreKill;										//var() bool bHighScoreKill;
	UPROPERTY()						bool						bSeparateTurretFocus;								//var bool bSeparateTurretFocus;
	UPROPERTY()						bool						bKeyVehicle;										//var bool bKeyVehicle;
	UPROPERTY()						bool						bScriptedRise;										//var bool bScriptedRise;
	UPROPERTY()						bool						bHasHandbrake;										//var bool bHasHandbrake;
	UPROPERTY()						bool						bHasRadar;											//var bool bHasRadar;
	UPROPERTY(EditAnywhere)			bool						bHUDTrackVehicle;									//var() bool bHUDTrackVehicle;
	UPROPERTY()						bool						bAllowWeaponToss;									//var bool bAllowWeaponToss;
	UPROPERTY()						bool						bAllowViewChange;									//var bool bAllowViewChange;
	UPROPERTY()						bool						bCanFlip;											//var bool bCanFlip;
	UPROPERTY()						bool						bEnterringUnlocks;									//var bool bEnterringUnlocks;
	UPROPERTY()						bool						bTeamLocked;										//var bool bTeamLocked;
	UPROPERTY()						bool						bWeaponisAltFiring;									//var bool bWeaponisAltFiring;
	UPROPERTY()						bool						bWeaponisFiring;									//var bool bWeaponisFiring;
	UPROPERTY()						bool						bLockFirstPersonView;								//var bool bLockFirstPersonView;
	UPROPERTY()						bool						bPCRelativeFPRotation;								//var bool bPCRelativeFPRotation;
	UPROPERTY(EditAnywhere)			bool						bZeroPCRotOnEntry;									//var() bool bZeroPCRotOnEntry;
	UPROPERTY(EditAnywhere)			bool						bDrawMeshInFP;										//var() bool bDrawMeshInFP;
	UPROPERTY()						bool						bNPCDriverCanUseSmoke;								//var bool bNPCDriverCanUseSmoke;
	UPROPERTY()						bool						bCanDoTrickJumps;									//var bool bCanDoTrickJumps;
	UPROPERTY()						bool						bCanHover;											//var bool bCanHover;
	UPROPERTY()						bool						bNoFriendlyFire;									//var bool bNoFriendlyFire;
	UPROPERTY()						bool						bDropDetail;										//var bool bDropDetail;
	UPROPERTY()						bool						bShowDamageOverlay;									//var bool bShowDamageOverlay;
	UPROPERTY()						bool						bVehicleDestroyed;									//var bool bVehicleDestroyed;
	UPROPERTY()						bool						bStalled;											//var bool bStalled;
	UPROPERTY()						bool						bNonHumanControl;									//var bool bNonHumanControl;
	UPROPERTY()						bool						bFollowLookDir;										//var bool bFollowLookDir;
	UPROPERTY()						float						TurnInPlaceThreshold;								//var float TurnInPlaceThreshold;
	UPROPERTY()						bool						bTurnInPlace;										//var bool bTurnInPlace;
	UPROPERTY()						bool						bEjectDriver;										//var bool bEjectDriver;
	UPROPERTY()						bool						bRemoteControlled;									//var bool bRemoteControlled;
	UPROPERTY()						bool						bAutoTurret;										//var bool bAutoTurret;
	UPROPERTY()						bool						bDefensive;											//var bool bDefensive;
	UPROPERTY(EditAnywhere)			bool						bRelativeExitPos;									//var() bool bRelativeExitPos;
	UPROPERTY(EditAnywhere)			bool						bDriverCollideActors;								//var() bool bDriverCollideActors;
	UPROPERTY(EditAnywhere)			bool						bDrawDriverInTP;									//var() bool bDrawDriverInTP;
	UPROPERTY()						bool						bReservedOccupation;								//var bool bReservedOccupation;
	UPROPERTY()						bool						bDrawVehicleShadow;									//var bool bDrawVehicleShadow;
	UPROPERTY()						bool						bOldDriving;										//var bool bOldDriving;
	UPROPERTY()						bool						bDriving;											//var bool bDriving;
	UPROPERTY(globalconfig)			bool						bVehicleShadows;									//var globalconfig bool bVehicleShadows;

	void SpawnSmokeGenerator(float fpSmokeLengthSeconds);
	void SpawnDestructionEffects();
	void HelicopterEngineSmoke(bool bEnable);
	void HelicopterRotorSmoke(bool bEnable);
	void HelicopterCockpitSmoke(bool bEnable);
	void HelicopterForceRotorMaxToIdleSpeed();
	void HelicopterRestoreRotorMaxSpeed();
	void UAVTakeOff();
	void UAVTurnLeft();
	void UAVTurnRight();
	void UAVSetThrottle(float fpThrottle);
	void UAVSetAileron(float fpAngle);
	void UAVSetElevator(float fpElevatorSetting);
	void UAVMoveElevator(float fpElevatorIncrement);
	void UAVSetRudder(float fpRudderSetting);
	void UAVMoveRudder(float fpRudderIncrement);
	void UAVSetVerticalVelocity(float fpVelocity);
	void UAVSetHorizontalVelocity(float fpVelocity);
	void UAVGear(bool bGearUp);
	void UAVLand();
	void UAVEnableAutoPilot(bool bEnable);
	int32 UAVGetRadioStrength();
	void StartSmokeGenerator();
	void StopSmokeGenerator();
	void GetActiveWeaponSystem();
	void GetPosition(int32 iPosition);
	void GetWeaponAim();
	void VehicleDisabled();
	void SetDriverHiddenAttachments();
	void ClearDriverHiddenAttachments();
	void PreBeginPlay();
	void PlayerChangedTeam();
	int32 GetVehicleNumber();
	int32 GetVehiclePositionIndex(AVehicle* VehiclePosition);
	void GetMyPositionIndex();
	void SetBaseEyeheight();
	FString GetVehiclePositionString();
	void Suicide();
	void MatchEnding();
	bool CheatWalk();
	bool CheatGhost();
	bool CheatFly();
	void CreateVRI();
	void PostBeginPlay();
	void SetInitialState();
	bool StronglyRecommended(AActor* S, int32 TeamIndex, AActor* Objective);
	void BotDesireability(AActor* S, int32 TeamIndex, AActor* Objective);
	void Destroyed();
	void Destroyed_HandleDriver();
	FVector GetCameraLocationStart();
	void SpecialCalcBehindView(APlayerController* PC, AActor* ViewActor, FVector& CameraLocation, FRotator& CameraRotation);
	void SpecialCalcFirstPersonView(APlayerController* PC, AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation);
	void SpecialSetFirstPersonViewRotation(APlayerController* PC, FRotator CameraRotation);
	bool SpecialCalcView(AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation);
	bool SpectatorSpecialCalcView(APlayerController* Viewer, AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation);
	void FindEntryVehicle(APawn* p);
	void TryToDrive(APawn* p);
	void VehicleLocked(APawn* p);
	void CannotAimAtEnemy();
	void PossessedBy(AController* C);
	void UnPossessed();
	void KDriverEnter(APawn* p);
	void AttachFlag(AActor* FlagActor);
	void SetWheelsScale(float NewScale);
	bool KDriverLeave(bool bForceLeave);
	void DriverLeft();
	void UpdateTiltForceFeedback();
	void ClientKDriverEnter(APlayerController* PC);
	void ClientClearController();
	void ClientKDriverLeave(APlayerController* PC);
	void ActivateOverlay(bool bActive);
	void FixPCRotation(APlayerController* PC);
	void GetDriverAttachmentBone(AActor*& AttachActor, FName& DriverAttachmentBone);
	void GetOffsets(FVector& oPosOffset, FRotator& oRotOffset);
	void AttachDriver(APawn* p);
	void DetachDriver(APawn* p);
	bool PlaceExitingDriver();
	void CheckForHeadShot(FVector loc, FVector ray, float AdditionalScale);
	bool TakeRadiusDamage(float DamageAmount, APawn* instigatedBy, FVector ExplosionLocation, float Momentum, UaDamageType* ExplosionDamageType, float DamageRadius);
	//void TakeDamage(int32 Damage, APawn* instigatedBy, FVector HitLocation, FVector Momentum, UaDamageType* DamageType, FBoneInfo Bone, AController* KillerController, AActor* ResponsibleActor, UMAterialInstance HitMaterial);
	bool HealDamage(int32 Amount, AController* Healer, UaDamageType* DamageType);
	void DriverRadiusDamage(float DamageAmount, float DamageRadius, AController* EventInstigator, UaDamageType* DamageType, float Momentum, FVector HitLocation);
	void DriverDied();
	void Died(AController* Killer, UaDamageType* DamageType, FVector HitLocation, FVector HitDir, FBoneInfo Bone);
	void AdjustDriverDamage(int32& Damage, APawn* instigatedBy, FVector HitLocation, FVector& Momentum, UaDamageType* DamageType);
	void EjectDriver();
	bool UsedBy(APawn* User);
	bool PanelUsedBy(APawn* User, int32 Id);
	void Fire(float F);
	void AltFire(float F);
	void ClientVehicleCeaseFire(bool bWasAltFire);
	void VehicleFire(bool bWasAltFire);
	void VehicleCeaseFire(bool bWasAltFire);
	bool StopWeaponFiring();
	void UpdateEyeHeight(float DeltaTime);
	void FaceRotation(FRotator NewRotation, float DeltaTime);
	void SetAnimAction(FName NewAction);
	void EncroachedBy(AActor* Other);
	void RanInto(AActor* Other);
	bool EncroachingOn(AActor* Other);
	void FindValidTaunt(FName& Sequence);
	void CheckTauntValid(FName Sequence);
	bool Occupied();
	float ReservationCostMultiplier();
	float NewReservationCostMultiplier(APawn* p);
	bool ChangedReservation(APawn* p);
	bool SpokenFor(AController* C);
	void SetReservation(AController* C);
	void OpenPositionFor(APawn* p);
	bool IndependentVehicle();
	void GetBestEntry(APawn* p);
	void GetMoveTargetFor(APawn* p);
	void DrivingStatusChanged();
	void TakeWaterDamage(float DeltaTime);
	void LockOnWarning();
	bool PointOfView();
	void PlayTeleportEffect(bool bOut, bool bSound);
	void PlayDying(UaDamageType* DamageType, FVector HitLoc, FVector HitDir, FBoneInfo Bone);
	uint8 GetTeamNum();
	void NotifyEnemyLockedOn();
	void IncomingMissile(AProjectile* p);
	void NotifyEnemyLostLock();
	void SetTeamNum(uint8 t);
	void TeamChanged();
	//void DisplayDebug(UCanvas* Canvas, float& YL, float& YPos);
	void DisplayVehicleDebug(UCanvas* Canvas, float& YL, float& YPos);
	AActor* ShootSpecial(AActor* A);
	void Stalled();
	void UnStalled();
	void NextWeapon();
	void PrevWeapon();
	void TeamLink(int32 TeamNum);
	bool NeedsFlip();
	void Flip(FVector HitNormal, float ForceScale);
	void ChargeBar();
	void ClientPlayForceFeedback(FString EffectName);
	void StopForceFeedback(FString EffectName);
	void ServerPlayHorn(int32 HornIndex);
	int32 NumPassengers();
	void GetInstigator();
	void GetBotPassenger();
	bool IsVehicleEmpty();
	bool HasOccupiedTurret();
	float AdjustedStrength();
	//void StaticPrecache(LevelInfo L);
	float GetSpree();
	void IncrementSpree();
	void ToggleVehicleView();
	void POVChanged(APlayerController* PC, bool bBehindViewChanged);
	void PlayTakeHit(FVector HitLocation, int32 Damage, UaDamageType* DamageType);
	void GetTurrets();
	void CheckSuperBerserk();
	bool VerifyLock(AActor* Aggressor, AActor*& NewTarget);
	void AlternateTarget();
	void ShouldTargetMissile(AProjectile* p);
	void ShootMissile(AProjectile* p);
	bool ImportantVehicle();
	bool IsArtillery();
	void ServerSetSeatbelt();
	void ServerRemoveSeatbelt();
	void SetSeatbelt();
	void GetDamageModifier(int32 BodyPanelID, UaDamageType* DamageType, int32 Damage);
	void NotifyVehiclePanelDamaged(int32 PanelID, int32 DamageLevel);
	void NotifyVehiclePanelDestroyed(int32 PanelID);



protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

};
