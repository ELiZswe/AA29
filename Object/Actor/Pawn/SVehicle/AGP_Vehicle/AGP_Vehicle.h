// All the original content belonged to the US Army

#pragma once

#include "CoreMinimal.h"
#include "AA29/Object/Actor/Pawn/SVehicle/SVehicle.h"
#include "AA29/AA29.h"
#include "AGP_Vehicle.generated.h"

class AAnnouncerVoice;


UCLASS(Config = Game)
class AA29_API AAGP_Vehicle : public ASVehicle
{
	GENERATED_BODY()
public:
	AAGP_Vehicle();

	UPROPERTY()											float fJavelinAccuracy;									//var float fJavelinAccuracy;
	UPROPERTY()											bool bUseDotTestForAim;									//var bool bUseDotTestForAim;
	UPROPERTY()											TArray<FName> RoofBones;								//var array<name> RoofBones;
	UPROPERTY()											TArray<FName> UndercarriageBones;						//var array<name> UndercarriageBones;
	UPROPERTY()											TArray<FName> WheelBones;								//var array<name> WheelBones;
	UPROPERTY()											TArray<FName> TreadBones;								//var array<name> TreadBones;
	UPROPERTY()											float CurrentZoneTimeToKill;							//var float CurrentZoneTimeToKill;
	UPROPERTY()											float TimeOutOfBounds;									//var float TimeOutOfBounds;
	UPROPERTY()											int32 OutOfBounds;										//var int OutOfBounds;
	UPROPERTY()											bool bDamageSystemCompatibilityHack;					//var bool bDamageSystemCompatibilityHack;
	UPROPERTY()											bool bClientInitComplete;								//var bool bClientInitComplete;
	UPROPERTY(config)									float DamageStateParticleTimeScaler;					//var config float DamageStateParticleTimeScaler;
	UPROPERTY()											FName SmokeGeneratorAttachmentBone;						//var name SmokeGeneratorAttachmentBone;
	UPROPERTY()											float fpSmokeEndTime;									//var float fpSmokeEndTime;
	UPROPERTY()											bool bSmokeGeneratorOn;									//var bool bSmokeGeneratorOn;
	//UPROPERTY()											ABaseSmokeEmitter* SmokeGenerator;					//var AGP_Effects.BaseSmokeEmitter SmokeGenerator;
	UPROPERTY()									UMaterialInstance* CrosshairTexture;					//var config Texture CrosshairTexture;
	UPROPERTY(config)									float CrosshairY;										//var config float CrosshairY;
	UPROPERTY(config)									float CrosshairX;										//var config float CrosshairX;
	UPROPERTY(config)									FColor CrossHairColor;									//var config Object.Color CrossHairColor;
	UPROPERTY()											int32 OldYaw;											//var int OldYaw;
	UPROPERTY()											float MinRunOverWarningAim;								//var float MinRunOverWarningAim;
	UPROPERTY()											float LastRunOverWarningTime;							//var float LastRunOverWarningTime;
	UPROPERTY()											float ResetTime;										//var float ResetTime;
	UPROPERTY()											USoundBase* LockedOnSound;								//var Sound LockedOnSound;
	UPROPERTY()											FString DebugInfo;										//var string DebugInfo;
	UPROPERTY(EditAnywhere)								float HeadlightProjectorScale;							//var() float HeadlightProjectorScale;
	UPROPERTY(EditAnywhere)								FRotator HeadlightProjectorRotation;					//var() Object.Rotator HeadlightProjectorRotation;
	UPROPERTY(EditAnywhere)								FVector HeadlightProjectorOffset;						//var() Object.Vector HeadlightProjectorOffset;
	UPROPERTY(EditAnywhere)								UMaterialInstance* HeadlightProjectorMaterial;			//var() Material HeadlightProjectorMaterial;
	//UPROPERTY()											AHeadlightProjector* HeadlightProjector;			//var  HeadlightProjector;
	UPROPERTY(EditAnywhere)								float HeadlightCoronaMaxSize;							//var() float HeadlightCoronaMaxSize;
	UPROPERTY(EditAnywhere)								UMaterialInstance* HeadlightCoronaMaterial;				//var() Material HeadlightCoronaMaterial;
	UPROPERTY(EditAnywhere)								TArray<FVector> HeadlightCoronaOffset;					//var() array<Vector> HeadlightCoronaOffset;
	//UPROPERTY()											TArray<AHeadlightCorona*> HeadlightCorona;			//var array<HeadlightCorona> HeadlightCorona;
	UPROPERTY(EditAnywhere)								bool bBulletImpactSparks;								//var() bool bBulletImpactSparks;
	UPROPERTY(EditAnywhere)								float SparkAdvanceFactor;								//var() float SparkAdvanceFactor;
	//UPROPERTY(EditAnywhere)								AImpactSparks* SparkEffect;							//var() ImpactSparks SparkEffect;
	//UPROPERTY(EditAnywhere)								AImpactSparks* SparkEffectClass;					//var() class<ImpactSparks> SparkEffectClass;
	UPROPERTY(EditAnywhere)								TArray<USoundBase*> ImpactDamageSounds;					//var() array<Sound> ImpactDamageSounds;
	UPROPERTY(EditAnywhere)								float ImpactDamageRadius;								//var() float ImpactDamageRadius;
	UPROPERTY(EditAnywhere)								float ImpactDamageMult;									//var() float ImpactDamageMult;
	UPROPERTY(EditAnywhere)								float ImpactDamageThreshold;							//var() float ImpactDamageThreshold;
	UPROPERTY(EditAnywhere)								float ImpactDamageTicks;								//var() float ImpactDamageTicks;
	UPROPERTY()											int32 ImpactTicksLeft;									//var int ImpactTicksLeft;
	UPROPERTY()											FImpactInfoStruct ImpactInfo;							//var AGP_Vehicle.ImpactInfoStruct ImpactInfo;
	UPROPERTY(EditAnywhere)								float ShakeOffsetTime;									//var() float ShakeOffsetTime;
	UPROPERTY(EditAnywhere)								FVector ShakeOffsetRate;								//var() Object.Vector ShakeOffsetRate;
	UPROPERTY(EditAnywhere)								FVector ShakeOffsetMag;									//var() Object.Vector ShakeOffsetMag;
	UPROPERTY(EditAnywhere)								float ShakeRotTime;										//var() float ShakeRotTime;
	UPROPERTY(EditAnywhere)								FVector ShakeRotRate;									//var() Object.Vector ShakeRotRate;
	UPROPERTY(EditAnywhere)								FVector ShakeRotMag;									//var() Object.Vector ShakeRotMag;
	UPROPERTY()											FVector AltFocalPoint;									//var Object.Vector AltFocalPoint;
	UPROPERTY()											bool bAltFocalPoint;									//var bool bAltFocalPoint;
	UPROPERTY()											bool bHasBeenAwake;										//var const bool bHasBeenAwake;
	UPROPERTY()											bool bIsAwake;											//var const bool bIsAwake;
	UPROPERTY()											bool bCustomAiming;										//var bool bCustomAiming;
	UPROPERTY()											bool bHasAltFireImpulse;								//var bool bHasAltFireImpulse;
	UPROPERTY()											bool bHasFireImpulse;									//var bool bHasFireImpulse;
	UPROPERTY(EditAnywhere)								FVector AltFireImpulse;									//var() Object.Vector AltFireImpulse;
	UPROPERTY(EditAnywhere)								FVector FireImpulse;									//var() Object.Vector FireImpulse;
	UPROPERTY()											bool bCannotBeBased;									//var bool bCannotBeBased;
	UPROPERTY()											bool bDriverCannotLeaveVehicle;							//var bool bDriverCannotLeaveVehicle;
	UPROPERTY()											bool bEjectPassengersWhenFlipped;						//var bool bEjectPassengersWhenFlipped;
	UPROPERTY()											bool bNeverReset;										//var bool bNeverReset;
	UPROPERTY()											bool bSoundsPrecached;									//var bool bSoundsPrecached;
	UPROPERTY(EditAnywhere)								bool bOnlyViewShakeIfDriven;							//var() bool bOnlyViewShakeIfDriven;
	UPROPERTY(EditAnywhere)								bool bEnableProximityViewShake;							//var() bool bEnableProximityViewShake;
	UPROPERTY()											bool bHadFire;											//var bool bHadFire;
	UPROPERTY()											bool bDisintegrateVehicle;								//var bool bDisintegrateVehicle;
	UPROPERTY()											bool bDestroyAppearance;								//var bool bDestroyAppearance;
	//UPROPERTY()											ADamagedEffect* DamagedEffect;						//var DamagedEffect DamagedEffect;
	UPROPERTY()											float DamagedEffectAccruedDamage;						//var float DamagedEffectAccruedDamage;
	UPROPERTY(EditAnywhere)								float DamagedEffectFireDamagePerSec;					//var() float DamagedEffectFireDamagePerSec;
	UPROPERTY(EditAnywhere)								float DamagedEffectAccScale;							//var() float DamagedEffectAccScale;
	UPROPERTY(EditAnywhere)								float DamagedEffectHealthFireFactor;					//var() float DamagedEffectHealthFireFactor;
	UPROPERTY(EditAnywhere)								float DamagedEffectHealthSmokeFactor;					//var() float DamagedEffectHealthSmokeFactor;
	UPROPERTY(EditAnywhere)								FVector DamagedEffectOffset;							//var() Object.Vector DamagedEffectOffset;
	UPROPERTY(EditAnywhere)								float DamagedEffectScale;								//var() float DamagedEffectScale;
	//UPROPERTY(EditAnywhere)								ADamagedEffect* DamagedEffectClass;					//var() class<DamagedEffect> DamagedEffectClass;
	UPROPERTY()											TArray<AActor*> AttachedActors;							//var array<Actor> AttachedActors;
	UPROPERTY(EditAnywhere)								TArray<FActorAttachment> AttachedActorTypes;			//var() array<ActorAttachment> AttachedActorTypes;
	UPROPERTY(config)									bool bImportIniParticleInfo;							//var config bool bImportIniParticleInfo;
	UPROPERTY(config)									TArray<FIniParticleInfo> ParticleInfo;					//var config array<IniParticleInfo> ParticleInfo;
	UPROPERTY(config)									bool bImportIniDamageZones;								//var config bool bImportIniDamageZones;
	UPROPERTY(config)									TArray<FTestDamageZoneInfo> TestDamageZones;			//var config array<TestDamageZoneInfo> TestDamageZones;
	UPROPERTY(config)									TArray<FsDamageInfo> NewDamageInfo;						//var config array<sDamageInfo> NewDamageInfo;
	UPROPERTY(EditAnywhere)								bool bUseNewWheelDamage;								//var() bool bUseNewWheelDamage;
	UPROPERTY(EditAnywhere)								bool bUseNewTreadDamage;								//var() bool bUseNewTreadDamage;
	UPROPERTY(EditAnywhere)								float Health_Wheels_Left;								//var() float Health_Wheels_Left;
	UPROPERTY(EditAnywhere)								float Health_Wheels_Right;								//var() float Health_Wheels_Right;
	UPROPERTY(EditAnywhere)								float Health_Tread_Left;								//var() float Health_Tread_Left;
	UPROPERTY(EditAnywhere)								float Health_Tread_Right;								//var() float Health_Tread_Right;
	UPROPERTY(EditAnywhere)								float Health_Back_Right;								//var() float Health_Back_Right;
	UPROPERTY(EditAnywhere)								float Health_Back_Left;									//var() float Health_Back_Left;
	UPROPERTY(EditAnywhere)								float Health_Front_Right;								//var() float Health_Front_Right;
	UPROPERTY(EditAnywhere)								float Health_Front_Left;								//var() float Health_Front_Left;
	UPROPERTY()											uint8 LastDamageZoneStates;								//var const byte LastDamageZoneStates;
	UPROPERTY()											uint8 DamageZoneStates;									//var byte DamageZoneStates;
	//UPROPERTY(EditAnywhere, Category = "DamageZone")	TArray<UVehicleDamageZone*> DefaultDamageZones;			//var(DamageZone) array<VehicleDamageZone> DefaultDamageZones;
	//UPROPERTY()											TArray<UVehicleDamageZone*> DamageZones;			//var array<VehicleDamageZone> DamageZones;
	UPROPERTY(EditAnywhere)								float OccupantExplosionProtection;						//var() float OccupantExplosionProtection;
	UPROPERTY()											UaDamageType* DestroyedRoadKillDamageType;				//var class<DamageType> DestroyedRoadKillDamageType;
	UPROPERTY()											UaDamageType* ExplosionDamageType;						//var class<DamageType> ExplosionDamageType;
	UPROPERTY()											float ExplosionMomentum;								//var float ExplosionMomentum;
	UPROPERTY()											float ExplosionRadius;									//var float ExplosionRadius;
	UPROPERTY()											float ExplosionDamage;									//var float ExplosionDamage;
	UPROPERTY()											float UpsideDownDamage;									//var float UpsideDownDamage;
	UPROPERTY()											float LastCheckUpsideDownTime;							//var float LastCheckUpsideDownTime;
	UPROPERTY()											float LastImpactExplosionTime;							//var float LastImpactExplosionTime;
	UPROPERTY()											float LastVelocitySize;									//var float LastVelocitySize;
	UPROPERTY()											uint8 OldExplosionCount;								//var byte OldExplosionCount;
	UPROPERTY()											uint8 ExplosionCount;									//var byte ExplosionCount;
	UPROPERTY(EditAnywhere)								float ExplosionSoundRadius;								//var() float ExplosionSoundRadius;
	UPROPERTY(EditAnywhere)								float bVehiExplosionSoundVolumecleOnGround;				//var() float ExplosionSoundVolume;
	UPROPERTY(EditAnywhere)								TArray<USoundBase*> ExplosionSounds;					//var() array<Sound> ExplosionSounds;
	UPROPERTY(EditAnywhere)								float TimeBetweenImpactExplosions;						//var() float TimeBetweenImpactExplosions;
	UPROPERTY(EditAnywhere)								FRange DestructionAngularMomentum;						//var() Object.Range DestructionAngularMomentum;
	UPROPERTY(EditAnywhere)								FRange DestructionLinearMomentum;						//var() Object.Range DestructionLinearMomentum;
	UPROPERTY(EditAnywhere)								FName DeathEvent;										//var() name DeathEvent;
	UPROPERTY(EditAnywhere)								float DisintegrationHealth;								//var() float DisintegrationHealth;
	//UPROPERTY(EditAnywhere)								AAGP_DestroyedVehicleModels* DestroyedModelClass;	//var() class<AGP_DestroyedVehicleModels> DestroyedModelClass;
	UPROPERTY(EditAnywhere)								AEmitter* DisintegrationEffectClass;					//var() class<Emitter> DisintegrationEffectClass;
	UPROPERTY(EditAnywhere)								AEmitter* DestructionEffectClass;						//var() class<Emitter> DestructionEffectClass;
	UPROPERTY(EditAnywhere)								UStaticMesh* DestroyedVehicleMesh;						//var() StaticMesh DestroyedVehicleMesh;
	UPROPERTY()											float ViewShakeLastCheck;								//var float ViewShakeLastCheck;
	UPROPERTY(EditAnywhere)								float ViewShakeOffsetFreq;								//var() float ViewShakeOffsetFreq;
	UPROPERTY(EditAnywhere)								FVector ViewShakeOffsetMag;								//var() Object.Vector ViewShakeOffsetMag;
	UPROPERTY(EditAnywhere)								float ViewShakeRotFreq;									//var() float ViewShakeRotFreq;
	UPROPERTY(EditAnywhere)								FRotator ViewShakeRotMag;								//var() Object.Rotator ViewShakeRotMag;
	UPROPERTY(EditAnywhere)								float ViewShakeRadius;									//var() float ViewShakeRadius;
	UPROPERTY(EditAnywhere)								FString ShutDownForce;									//var() string ShutDownForce;
	UPROPERTY(EditAnywhere)								FString StartUpForce;									//var() string StartUpForce;
	UPROPERTY()											float EngineIdlePitch;									//var float EngineIdlePitch;
	UPROPERTY()											float EngineIdleVolume;									//var float EngineIdleVolume;
	UPROPERTY(EditAnywhere)								USoundBase* ShutDownSound;								//var() Sound ShutDownSound;
	UPROPERTY(EditAnywhere)								USoundBase* StartUpSound;								//var() Sound StartUpSound;
	UPROPERTY(EditAnywhere)								USoundBase* IdleSound;									//var() Sound IdleSound;
	//UPROPERTY(EditAnywhere)								TArray<UVehicleEntryPoint*> EntryPoints;			//var() array<VehicleEntryPoint> EntryPoints;
	UPROPERTY()											bool bHasAltFire;										//var bool bHasAltFire;
	UPROPERTY()											FRotator CustomAim;										//var Object.Rotator CustomAim;
	UPROPERTY()											uint8 ActiveWeapon;										//var byte ActiveWeapon;
	UPROPERTY()											bool bPlayingIdle;										//var bool bPlayingIdle;
	UPROPERTY()											bool bPlayedStartup;									//var bool bPlayedStartup;
	UPROPERTY()											FName DriverRoot;										//var name DriverRoot;
	UPROPERTY()											bool bEnableChangePosition;								//var bool bEnableChangePosition;
	UPROPERTY()											AVehiclePosition* Positions;							//var array<VehiclePosition> Positions;
	UPROPERTY(EditAnywhere, Category = "SVehicle")		TArray<FVehiclePositionStruct> PositionTypes;			//var(SVehicle) array<VehiclePositionStruct> PositionTypes;
	//UPROPERTY()											TArray<AVehicleWeapon*> VehicleWeapons;				//var array<VehicleWeapon> VehicleWeapons;
	UPROPERTY(EditAnywhere, Category = "SVehicle")		TArray<FDriverWeaponStruct> DriverWeapons;				//var(SVehicle) array<DriverWeaponStruct> DriverWeapons;


	void SetVehicleZeroExtentCollision(bool bSet);
	void DamageOccupants(int32 Damage, AActor* Instigator, FVector StartLoc, FRotator TestAngle, UaDamageType* DamageType);
	void WeaponSeePawn(AActor* TargetActor);
	
	void PlayIdleSound();
	void Trigger(AActor* Other, APawn* EventInstigator);
	void PostBeginPlay();
	void NotifyEnemyLockedOn();
	void NotifyEnemyLostLock();
	void HasWeapon();
	UMaterialInstance* LookupCollisionMaterial(AActor* SearchActor);
	bool CanAttack(AActor* Other);
	void Deploy();
	void MayUndeploy();
	void TooCloseToAttack(AActor* Other);
	void ChooseFireAt(AActor* A);
	int32 RefireRate();
	void IsFiring();
	void NeedToTurn(FVector targ);
	bool FireOnRelease();
	float ModifyThreat(float Current, APawn* Threat);
	bool ChangedReservation(APawn* p);
	float ReservationCostMultiplier();
	float NewReservationCostMultiplier(APawn* p);
	bool SpokenFor(AController* C);
	void SetReservation(AController* C);
	void OpenPositionFor(APawn* p);
	void DisplayVehicleDebug(UCanvas* Canvas, float &YL, float &YPos);
	//void DisplayDebug(UCanvas* Canvas, out float YL, out float YPos);
	void PostNetBeginPlay();
	void GetPosition(int32 iPosition);
	void GetWeaponAim();
	void InitServerDamageZones();
	void IniExportDebugIniValues();
	void IniExportDefaultDamageZonesToIni();
	FString IniGetString(FString Value);
	void IniExportParticleInfo();
	void ResetVehicleIni();
	void CannotAimAtEnemy();
	void IniImportDamageValues();
	void IniImportParticleValues();
	void IniDetermineIniImports();
	void CopyDefaultDamageZonesToDamageZones();
	//void ClientRegisterVehicleWeapon(AVehicleWeapon* W, int32 Index);
	void ServerVerifyVehicleWeapon(int32 Index);
	void FindEntryVehicle(APawn* p);
	bool TryToDrive(APawn* p);
	void IdleSoundTimer();
	void KDriverEnter(APawn* p);
	bool KDriverLeave(bool bForceLeave);
	void DriverDied();
	void GetActiveWeaponSystem();
	void SetActiveWeapon(int32 i);
	void VehicleLocked(APawn* p);
	void DriverLeft();
	void CheckReset();
	int32 NumPassengers();
	void GetBotPassenger();
	void GetInstigator();
	bool IsVehicleEmpty();
	bool HasOccupiedTurret();
	void ClientKDriverEnter(APlayerController* PC);
	void ClientKDriverLeave(APlayerController* PC);
	void Died(AController* Killer, UaDamageType* DamageType, FVector HitLocation, FVector HitDir, FBoneInfo Bone);
	void Destroyed();
	void CleanUpDamageZones();
	void VehicleCeaseFire(bool bWasAltFire);
	void TeamChanged();
	void ApplyDamageMomentum(FVector ForceVector, float Momentum, float NearestZoneDist, FVector ExplosionLocation, float DamageRadius, UaDamageType* DamageType);
	bool TakeRadiusDamage(float DamageAmount, APawn* instigatedBy, FVector ExplosionLocation, float Momentum, UaDamageType* InDamageType, float DamageRadius);
	void TakeProjectileImpactDamage(int32 Damage, APawn* instigatedBy, FVector HitLocation, FVector Momentum, UaDamageType* InDamageType, FBoneInfo Bone, AController* KillerController, AActor* ResponsibleActor, UMaterialInstance* HitMaterial);
	//void TakeDamage(int32 Damage, APawn* instigatedBy, FVector HitLocation, FVector Momentum, UaDamageType* InDamageType, optional Actor.BoneInfo Bone, optional AController* KillerController, optional Actor ResponsibleActor, optional Material HitMaterial);
	void ZoneTakeDamage(int32 Damage, uint8 ZoneNum, APawn* instigatedBy, UaDamageType* InDamageType, FVector HitLocation);
	uint8 CheckDamageState(uint8 ZoneNum, uint8 CurrentState, float DamagePct);
	bool IsReplicationComplete();
	void InitializeDamageZones();
	void ClientInitializeDamageZones();
	void SetVehicleDamageState(uint8 NewDamageState);
	void SourceChangeDamageState(uint8 ZoneNum, uint8 NewStateNum);
	bool VerifyVehicleSystemBones(bool bFoundBadBones);
	void ActorHasBone(AActor* MeshOwner, FName BoneName);
	bool LogBadBoneNames(AActor* mo, FName LookupBone, bool bBadBones, FString VariableName, FString AppendString);
	bool CheckBadDamageState(AActor* mo, FName LookupBone, bool bBadBones, int32 ZoneNum, int32 StateNum, int32 DamageBonesNum);
	void ChangeDamageState(uint8 ZoneNum, uint8 NewStateNum);
	void DriverRadiusDamage(float DamageAmount, float DamageRadius, AController* EventInstigator, UaDamageType* DamageType, float Momentum, FVector HitLocation);
	void NPC_Fire(float F, APawn* Enemy);
	void Fire(float F);
	void AltFire(float F);
	void ClientVehicleCeaseFire(bool bWasAltFire);
	void TakeImpactDamage(float AccelMag);
	void ImpactDamageModifier();
	void KImpact(AActor* Other, FVector pos, FVector impactVel, FVector impactNorm);
	int32 ChargeBar();
	bool FastVehicle();
	bool IsDeployed();
	void SetTeamNum(uint8 t);
	bool CanLean();
	void LeanLeft(bool bFullLeft);
	void LeanRight(bool bFullRight);
	void ServerChangePosition(bool bNext, APawn* p);
	void SpawnDestroyedModels();
	void SpawnDestructionEffects();
	void DestroyAppearance();
	void VehicleExplosion(FVector MomentumNormal, float PercentMomentum);
	void ClientVehicleExplosion(bool bFinal);
	void PlayDoorAnim(int32 Position);
	void OpenDoor(int32 Position);
	void CloseDoor(int32 Position);
	void SVehicleUpdateParams();
	void LimitPitch(int32 Pitch);
	void ServerPlayHorn(int32 HornIndex);
	void DrawHUD(UCanvas* Canvas);
	void PlayHit(float Damage, APawn* instigatedBy, FVector HitLocation, UaDamageType* DamageType, FVector Momentum);
	void GetTurrets();
	void PrecacheAnnouncer(AAnnouncerVoice* V, bool bRewardSounds);
	//void StaticPrecache(LevelInfo L);
	void UpdatePrecacheStaticMeshes();
	void UpdatePrecacheMaterials();
	void NotifyControllerOutOfBounds(int32 Seconds);
	void AlertClientReturnedToCombat();
	void KillControllerOutOfBounds();
	void VehicleOutOfBoundsCheck();
	void PlaceExitingDriver();
	void Timer();
	void CheckSmokeGenerator();
	void SpawnSmokeGenerator(float fpSmokeLengthSeconds);
	void StartSmokeGenerator();
	void StopSmokeGenerator();


};
