// All the original content belonged to the US Army

#pragma once

#include "CoreMinimal.h"
#include "AA29/AA29.h"
#include "AA29/Object/Actor/Keypoint/BaseObjective/AGP_Objective/AGP_Objective.h"
#include "AA29/Object/Actor/DecoMesh/Mover/Mover.h"
#include "AA29/Object/Actor/InventoryAttachment/WeaponAttachment/BaseWeaponAttachment/FixedWeaponAttachment/FixedWeaponAttachment.h"
#include "AA29/AA2_Playerstate.h"
#include "AA29/Object/CameraEffect/CamEffect_FlashBang/CamEffect_FlashBang.h"
#include "GameFramework/PlayerController.h"
#include "HumanController.generated.h"

static const float kWeaponMsgFlashPS = 2.0f;
static const float kTimePosX = 776.0f;
static const float kTimePosY = 50.0f;

class AAGP_ServerInfo;
class AMissionCompleteRequestAdapter;
class UScriptObject;

UCLASS()
class AA29_API AHumanController : public APlayerController
{
	GENERATED_BODY()

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	AHumanController();

	UFUNCTION(BlueprintCallable)		void RequestChangeTeam(int32 N);
	UFUNCTION(BlueprintCallable)		void DumpServerStats();
	UFUNCTION(BlueprintCallable)		void DumpServerDynamicActors();
	UFUNCTION(BlueprintCallable)		void CheckOutOfBounds();
	UFUNCTION(BlueprintCallable)		void InduceFailure();
	UFUNCTION(BlueprintCallable)		void ResetRend();
	UFUNCTION(BlueprintCallable)		void PostNetBeginPlay();
	UFUNCTION(BlueprintCallable)		void EntryLevelSimulatedScreenplay();
	UFUNCTION(BlueprintCallable)		void ChangeUserName(FString S);
	UFUNCTION(BlueprintCallable)		void ObfuscatePassword(FString Password);
	UFUNCTION(BlueprintCallable)		void DeobfuscatePassword(FString Password);
	UFUNCTION(BlueprintCallable)		void RestoreSavedUserNameAndPassword();
	UFUNCTION(BlueprintCallable)		void ServerCheckServerAuthAndPBMode();
	UFUNCTION(BlueprintCallable)		void ClientSetAuthMode(bool bAuthorizedServer, bool bRequiresAuthorization, int32 iPBEnabled);
	UFUNCTION(BlueprintCallable)		void ClientSetAccessControlKickMessage(FString sMessage);
	UFUNCTION(BlueprintCallable)		void ClientForceGamePlayMode(EGameplayModes newmode);
	UFUNCTION(BlueprintCallable)		void ClientSetServerFlags(bool bCheat, bool bDev, bool bBeta, bool bLeased, bool bOfficial, bool bNATO, bool bTournament, bool bUltimateArena, bool bIsAuthorized, bool bRequiresAuthorization, bool bPlayersOnly, bool bFirstPerson, bool bBodies, bool bAllowLocalScores, bool bIsExploreTheArmyServer, bool bAllowForceclassing);
	UFUNCTION(BlueprintCallable)		void SetDevMode(bool bNewDevMode);
	UFUNCTION(BlueprintCallable)		void DevMode(bool bSet);
	UFUNCTION(BlueprintCallable)		void HideSmoke(bool bDisableRendering);
	UFUNCTION(BlueprintCallable)		void ServerRequestAuthorization(FString InUserName, FString InEncryptedPassword, FString sLANPlayerName);
	UFUNCTION(BlueprintCallable)		void ClientSetETA(bool bEnable);
	UFUNCTION(BlueprintCallable)		void ReceivedAuthRequest();
	UFUNCTION(BlueprintCallable)		void PostLoginComplete();
	UFUNCTION(BlueprintCallable)		void EvaluateStatus();
	UFUNCTION(BlueprintCallable)		void ReadyForFinishPostLogin();
	UFUNCTION(BlueprintCallable)		void NotifyAuthWaiting(bool bWaiting);
	UFUNCTION(BlueprintCallable)		void ClientChangeName(FString sNewName);
	UFUNCTION(BlueprintCallable)		void ChangeName(FString sNewName);
	UFUNCTION(BlueprintCallable)		void AnnounceNewPlayerJoiningServer(FString sMsg);
	UFUNCTION(BlueprintCallable)		void svp();
	UFUNCTION(BlueprintCallable)		void nvp();
	UFUNCTION(BlueprintCallable)		void ServerSetSystemLanguage(FString Language);
	UFUNCTION(BlueprintCallable)		void ServerSetUserName(FString sUserName);
	UFUNCTION(BlueprintCallable)		void ClientSimulateTrainingComplete();
	UFUNCTION(BlueprintCallable)		void SimulateTrainingComplete();
	UFUNCTION(BlueprintCallable)		void ClientEnableStateChange(bool fEnable);
	UFUNCTION(BlueprintCallable)		void ChangeMyName(FString sName);
	UFUNCTION(BlueprintCallable)		void ServerCanPlayerJoin(FString sUserName);
	UFUNCTION(BlueprintCallable)		void ClientPlayerCanJoin(bool bAuthUsed, int32 iPBEnabledOnServer);
	UFUNCTION(BlueprintCallable)		void ClientDisconnect(FString Msg);
	UFUNCTION(BlueprintCallable)		void NotifyAuthServerOfMPMissionComplete();
	UFUNCTION(BlueprintCallable)		void AuthUpdateExperienceCallback(int32 ResultCode, int32 experience_current, int32 experience_needed, int32 honor_current);
	UFUNCTION(BlueprintCallable)		void LoadUserProfileAndNews();
	UFUNCTION(BlueprintCallable)		void AuthGetJacketCallback(int32 ResultCode, FAuthPersonnelJacket Jacket);
	UFUNCTION(BlueprintCallable)		void ClientNotifyAuthServerMessage(FString ErrMsg1, FString ErrMsg2, FString ErrURL1, FString ErrURL2);
	UFUNCTION(BlueprintCallable)		void ServerUploadTrustAndExperience(int32 Logout);
	UFUNCTION(BlueprintCallable)		void ServerUploadStats(int32 Kills, int32 Deaths, int32 ShotsFired, int32 ShotsThatHitAGPPawns, float PlayDuration);
	UFUNCTION(BlueprintCallable)		void ServerMissionCompleteAuthorizeComplete(int32 Code, FAuthJacket Jacket);
	UFUNCTION(BlueprintCallable)		void ServerExperienceUpdateAuthorizeComplete(int32 Code);
	UFUNCTION(BlueprintCallable)		void AuthTransmissionErrorCallback(int32 iReason, FString sMsg, FString sShortMsg);
	UFUNCTION(BlueprintCallable)		void AddMBSAttributes(TArray<FKeyValuePair> &Attributes);
	UFUNCTION(BlueprintCallable)		void SetLoginStatus(int32 iStatus, FString sStatus, FString sNavMsg);
	UFUNCTION(BlueprintCallable)		void DisplayVAECompleteMessage();
	UFUNCTION(BlueprintCallable)		void DisplayMissionSuccess(FString Texture, FString Text, FString text2, int32 USize, int32 VSize, int32 RenderStyle, FName replayscene);
	UFUNCTION(BlueprintCallable)		void DisplayMissionCompleteOther(FString Texture, FString Text, FString text2, int32 USize, int32 VSize, int32 RenderStyle, FName replayscene, FString OtherMenu);
	UFUNCTION(BlueprintCallable)		void DisplayMissionFailure(FString Texture, FString Text, FString text2, int32 USize, int32 VSize, int32 RenderStyle, FName replayscene);
	UFUNCTION(BlueprintCallable)		void DisplayLandNavScore(FString text1, FString text2, FString text3, FString text4, FString text5, FString text6, FString text7, FString text8);
	UFUNCTION(BlueprintCallable)		void ResetAuthExtraMissionData();
	UFUNCTION(BlueprintCallable)		void SetAuthMissionPassFlag(bool bAMissionPass);
	UFUNCTION(BlueprintCallable)		void CopyAuthExtraMissionDataToAdapter(AMissionCompleteRequestAdapter* Adapter);
	UFUNCTION(BlueprintCallable)		bool AddAuthExtraMissionData(FString sMissionData);
	UFUNCTION(BlueprintCallable)		void MissionCompleted();
	UFUNCTION(BlueprintCallable)		void SendMissionComplete(int32 Tour, int32 Mission);
	UFUNCTION(BlueprintCallable)		void ParseMissionString(FString sMissions, bool bNews);
	UFUNCTION(BlueprintCallable)		void UpdateAuthRelatedPRI();
	UFUNCTION(BlueprintCallable)		FString AddField(FString Mission, FString Field);
	UFUNCTION(BlueprintCallable)		void BitsetToString(int32 Bitset);
	UFUNCTION(BlueprintCallable)		FString GenerateMissionString();
	UFUNCTION(BlueprintCallable)		void SendAuthJacketToClient(FAuthJacket Jacket);

	UFUNCTION(BlueprintCallable)		void PostBeginPlay();
	UFUNCTION(BlueprintCallable)		void PreBeginPlay();
	UFUNCTION(BlueprintCallable)		void Destroyed();
	


	UFUNCTION(BlueprintCallable)		void Shake(float Time, float Intensity);
	UFUNCTION(BlueprintCallable)		void SetAutoLoggedInRunOnce();
	UFUNCTION(BlueprintCallable)		void HasAutoLoggedInRunOnce();
	UFUNCTION(BlueprintCallable)		void SetNightVision(bool Set);
	UFUNCTION(BlueprintCallable)		void ClientGlobalCameraScreenShake(float ShakeTime, float ShakeIntensity);
	//UFUNCTION(BlueprintCallable)		void ClientGameEnded();																	// Already exists in PlayerController with different def
	UFUNCTION(BlueprintCallable)		void TournamentWarmupClientGameEnded();
	UFUNCTION(BlueprintCallable)		bool CanFire();
	UFUNCTION(BlueprintCallable)		void TurnAround();
	UFUNCTION(BlueprintCallable)		void CleanUp();
	UFUNCTION(BlueprintCallable)		void CleanupLevel();
	//UFUNCTION(BlueprintCallable)		void ClientReStart(APawn* NewPawn, bool bDontClearLevelParam);							// Already exists in PlayerController with different def
	UFUNCTION(BlueprintCallable)		void PlayerTick(float DeltaTime);
	UFUNCTION(BlueprintCallable)		float GetSoundDampening();
	UFUNCTION(BlueprintCallable)		void CalcSoundDampening();
	UFUNCTION(BlueprintCallable)		void Timer();
	UFUNCTION(BlueprintCallable)		void IdleCheck();
	UFUNCTION(BlueprintCallable)		void TestIdle_Location();
	UFUNCTION(BlueprintCallable)		void TestIdle_Rotation();
	UFUNCTION(BlueprintCallable)		bool TestIdle_Weapon();
	UFUNCTION(BlueprintCallable)		void IdleCheckPerRound(bool bEndGame);
	UFUNCTION(BlueprintCallable)		void PawnDied(APawn* p);
	UFUNCTION(BlueprintCallable)		void NotifyImpendingIdleKick(bool bIdleRounds);
	UFUNCTION(BlueprintCallable)		void RenderOverlays_Stage1(UCanvas* Canvas);
	UFUNCTION(BlueprintCallable)		void RenderOverlays_Stage2(UCanvas* Canvas);
	UFUNCTION(BlueprintCallable)		FString TwoDigitString(int32 Num);
	UFUNCTION(BlueprintCallable)		bool CheckFlashTime();
	UFUNCTION(BlueprintCallable)		void SetStartupStage(EStartupStage Stage);
	UFUNCTION(BlueprintCallable)		void NotifyStartupStage(bool bfadein);
	UFUNCTION(BlueprintCallable)		void PlayStartupMessage(UCanvas* Canvas);
	UFUNCTION(BlueprintCallable)		void FlashBanged(float Duration, float VisIntensity, float AudIntensity);
	UFUNCTION(BlueprintCallable)		void ClientFlashBanged(float Duration, float VisIntensity, float AudIntensity);
	UFUNCTION(BlueprintCallable)		void GrenadeExploded(float Duration, float Intensity);
	UFUNCTION(BlueprintCallable)		void Grenaded(float Duration, float AudIntensity);
	UFUNCTION(BlueprintCallable)		void ClientGrenaded(float Duration, float AudIntensity);
	UFUNCTION(BlueprintCallable)		void StartScreenShake(float ShakeTime);
	UFUNCTION(BlueprintCallable)		void ClientStartScreenShake(float ShakeTime);
	UFUNCTION(BlueprintCallable)		void ClientStartViewShake(int32 NewHitShakeAngle, float NewHitShakeOffset, float NewHitShakeMin, float NewHitShakeMax, float NewHitShakeRate);
	UFUNCTION(BlueprintCallable)		void PostRender(UCanvas* Canvas);
	UFUNCTION(BlueprintCallable)		void SetPlayTips(FString InVal, FString inval2, float ttl);
	UFUNCTION(BlueprintCallable)		void CalcFirstPersonView(FVector CameraLocation, FRotator CameraRotation);
	UFUNCTION(BlueprintCallable)		void CycleZoom();
	UFUNCTION(BlueprintCallable)		void TRUnZoomWeapon();
	UFUNCTION(BlueprintCallable)		void TRZoomWeapon();
	UFUNCTION(BlueprintCallable)		void TRCrouchDown();
	UFUNCTION(BlueprintCallable)		void TRUnCrouch();
	UFUNCTION(BlueprintCallable)		void Zoom();
	UFUNCTION(BlueprintCallable)		void NV();
	UFUNCTION(BlueprintCallable)		void Shadows(FString parm);
	UFUNCTION(BlueprintCallable)		void SetBloom(bool bNewBloomMode);
	UFUNCTION(BlueprintCallable)		void Bloom(FString parm);
	UFUNCTION(BlueprintCallable)		bool CanLean();
	UFUNCTION(BlueprintCallable)		void ServerWantsToRoll(bool bRollLeft);
	UFUNCTION(BlueprintCallable)		void RequestCombatRoll(bool bRollLeft);
	UFUNCTION(BlueprintCallable)		void LeanLeft();
	UFUNCTION(BlueprintCallable)		void LeanRight();
	UFUNCTION(BlueprintCallable)		void LeanCenter();
	UFUNCTION(BlueprintCallable)		void ViewShake(float DeltaTime);
	UFUNCTION(BlueprintCallable)		void UpdateTimers(float DeltaTime);
	UFUNCTION(BlueprintCallable)		void Mantle(FVector out_Point, FVector out_Normal);
	UFUNCTION(BlueprintCallable)		void DevBug();
	UFUNCTION(BlueprintCallable)		bool ClientOpenMenu(FString Menu, bool bDisconnect, FString Msg1, FString Msg2);
	UFUNCTION(BlueprintCallable)		void AGPGameMenu();
	UFUNCTION(BlueprintCallable)		void AGPMainMenu();
	UFUNCTION(BlueprintCallable)		void AGPLoginMenu();
	UFUNCTION(BlueprintCallable)		void AGPSplashScreen();
	UFUNCTION(BlueprintCallable)		void OldMainMenu();
	UFUNCTION(BlueprintCallable)		void AGPMissionResults();
	UFUNCTION(BlueprintCallable)		void RadarSetZoom(float Meters);
	UFUNCTION(BlueprintCallable)		void RadarGetZoom();
	UFUNCTION(BlueprintCallable)		void SAIZoomIn();
	UFUNCTION(BlueprintCallable)		void SAIZoomOut();
	UFUNCTION(BlueprintCallable)		void ToggleSAIPlayerInfo();
	UFUNCTION(BlueprintCallable)		void ToggleSAISize();
	UFUNCTION(BlueprintCallable)		void EnemySpotted();
	UFUNCTION(BlueprintCallable)		void ServerEnemySpotted(float SpottedX, float SpottedY, float SpottedZ);
	UFUNCTION(BlueprintCallable)		void ClientEnemySpotted(float SpottedX, float SpottedY, float SpottedZ, float SpotDuration);
	UFUNCTION(BlueprintCallable)		void ClearOldEnemiesSpotted();
	UFUNCTION(BlueprintCallable)		void ESSObjectSpotted(AAGP_Objective* Objective);
	UFUNCTION(BlueprintCallable)		void ServerESSSpotted(float SpottedX, float SpottedY, float SpottedZ, bool bLetal);
	UFUNCTION(BlueprintCallable)		void ClientESSSpotted(float SpottedX, float SpottedY, float SpottedZ, bool bLethal);
	UFUNCTION(BlueprintCallable)		void ClearOldNonLethalESSSpotted();
	UFUNCTION(BlueprintCallable)		void ServerPlaySound(USoundBase* ASound);
	UFUNCTION(BlueprintCallable)		void Jump(float F);
	UFUNCTION(BlueprintCallable)		bool HandlePickupQuery(APickup* Item);
	UFUNCTION(BlueprintCallable)		void HandlePickup(APickup* pick);
	UFUNCTION(BlueprintCallable)		bool CanSwapHands();
	UFUNCTION(BlueprintCallable)		void SwapHands();
	UFUNCTION(BlueprintCallable)		void SwapAltShoulder();
	UFUNCTION(BlueprintCallable)		bool CanSwapAltShoulder();
	UFUNCTION(BlueprintCallable)		void ServerSwapHands();
	UFUNCTION(BlueprintCallable)		void SwapHip();
	UFUNCTION(BlueprintCallable)		void ServerSwapHip();
	UFUNCTION(BlueprintCallable)		void ServerForceWeaponUnzoom();
	UFUNCTION(BlueprintCallable)		void ServerSwapAltShoulder();
	UFUNCTION(BlueprintCallable)		void Grenade(uint8 Index);
	UFUNCTION(BlueprintCallable)		void GrenadeFrag();
	UFUNCTION(BlueprintCallable)		void GrenadeSmoke();
	UFUNCTION(BlueprintCallable)		void GrenadeFlash();
	UFUNCTION(BlueprintCallable)		void GrenadeIncendiary();
	UFUNCTION(BlueprintCallable)		void GrenadePDM();
	UFUNCTION(BlueprintCallable)		void DemolitionItem();
	UFUNCTION(BlueprintCallable)		void SignalEnteredPickupZone();
	UFUNCTION(BlueprintCallable)		void GrenadeSignal();
	UFUNCTION(BlueprintCallable)		void binoculars();
	UFUNCTION(BlueprintCallable)		void ServerBinoculars();
	UFUNCTION(BlueprintCallable)		void Pistol();
	UFUNCTION(BlueprintCallable)		void ServerSwapHolster();
	UFUNCTION(BlueprintCallable)		void CommoHand();
	UFUNCTION(BlueprintCallable)		void CommoWhisper();
	UFUNCTION(BlueprintCallable)		void CommoShout();
	UFUNCTION(BlueprintCallable)		void CommoRadio();
	UFUNCTION(BlueprintCallable)		void CommoSquad();
	UFUNCTION(BlueprintCallable)		void CommoGlobal();
	UFUNCTION(BlueprintCallable)		void ServerGrenade(uint8 Index);
	UFUNCTION(BlueprintCallable)		void ThrowWeapon();
	UFUNCTION(BlueprintCallable)		void IncreaseRange();
	UFUNCTION(BlueprintCallable)		void DecreaseRange();
	UFUNCTION(BlueprintCallable)		void ZeroRange();
	UFUNCTION(BlueprintCallable)		void FastMove();
	UFUNCTION(BlueprintCallable)		void ServerThrowWeapon();
	UFUNCTION(BlueprintCallable)		void SetIndex(int32 i);
	UFUNCTION(BlueprintCallable)		void SetIndexName(int32 i, FString S);
	UFUNCTION(BlueprintCallable)		void SetWeapon(FString S);
	UFUNCTION(BlueprintCallable)		void SetMod(int32 i, FString S);
	UFUNCTION(BlueprintCallable)		void CubePics(uint8 Index);
	UFUNCTION(BlueprintCallable)		void GetIndexName(int32 i);
	UFUNCTION(BlueprintCallable)		void GetCurrentIndexName();
	UFUNCTION(BlueprintCallable)		void GetLegalWeapon(FString S);
	UFUNCTION(BlueprintCallable)		FString GetLegalMod(FString S);
	UFUNCTION(BlueprintCallable)		void GetCurrentIndex();
	UFUNCTION(BlueprintCallable)		void GetCurrentMod(int32 Index, int32 Slot);
	UFUNCTION(BlueprintCallable)		void SetWeaponMods();
	UFUNCTION(BlueprintCallable)		void SaveWeaponMods();
	UFUNCTION(BlueprintCallable)		void UploadWeaponMods();
	UFUNCTION(BlueprintCallable)		void ServerSetWeaponMods(int32 Slot, FString new_mod);
	UFUNCTION(BlueprintCallable)		void SetSkin(FString S);
	UFUNCTION(BlueprintCallable)		void SetSkinPreference(FString S);
	UFUNCTION(BlueprintCallable)		void ServerSetSkinPreference(ESkinPreference newpref);
	UFUNCTION(BlueprintCallable)		void setFace(FString S);
	UFUNCTION(BlueprintCallable)		void SetOpFace(FString S);
	UFUNCTION(BlueprintCallable)		void ServerSetFace(FString newface, bool bFriend);
	//UFUNCTION(BlueprintCallable)		void ClientSetViewTarget(AActor* Target);												// Already exists in PlayerController with different def
	UFUNCTION(BlueprintCallable)		void ClientResetSpectator();
	UFUNCTION(BlueprintCallable)		void ClientSetViewTarget2(AActor* Target);
	UFUNCTION(BlueprintCallable)		void ServerReSendViewTarget();
	UFUNCTION(BlueprintCallable)		void WaitForPawnToBecomeRelevant();
	UFUNCTION(BlueprintCallable)		void GetViewTargetActor(AActor* VT);
	//UFUNCTION(BlueprintCallable)		void GetViewTarget(AActor* VTA);														// Already exists in PlayerController with different def
	UFUNCTION(BlueprintCallable)		void GetNextViewTargetActor(EViewPreference viewpref, AActor* A);
	UFUNCTION(BlueprintCallable)		void GetNextViewBody(AActor* A);
	UFUNCTION(BlueprintCallable)		bool IsSpectatePlayersOnly();
	UFUNCTION(BlueprintCallable)		bool IsSpectateFirstPersonOnly();
	UFUNCTION(BlueprintCallable)		bool IsSpectateBodies();
	UFUNCTION(BlueprintCallable)		bool CanBehindView();
	UFUNCTION(BlueprintCallable)		void ClientSetViewPreference(EViewPreference evpNew);
	UFUNCTION(BlueprintCallable)		void ServerSetViewPreference(EViewPreference evpNew);
	UFUNCTION(BlueprintCallable)		void ServerCycleViewPreference();
	UFUNCTION(BlueprintCallable)		void ServerNextViewTarget(EViewPreference viewpref, bool bprev, bool bForceViewChange, bool fFindFirstPlayerOnlyView);
	UFUNCTION(BlueprintCallable)		void NextViewpointViewTarget(bool bprev, bool bNoSwitchToPawns);
	UFUNCTION(BlueprintCallable)		void NextPlayerViewTarget(bool bprev);
	UFUNCTION(BlueprintCallable)		void NextBodyViewTarget(bool bprev);
	UFUNCTION(BlueprintCallable)		void NotifyLostViewTarget();
	UFUNCTION(BlueprintCallable)		void ServerNotifyLostViewTarget();
	UFUNCTION(BlueprintCallable)		void NotifyPawnDestroyed(APawn* p);
	UFUNCTION(BlueprintCallable)		void DebugFlushStats();
	UFUNCTION(BlueprintCallable)		void ServerDebugFlushStats();
	UFUNCTION(BlueprintCallable)		void DebugClientDumpPawns();
	UFUNCTION(BlueprintCallable)		void DebugServerDumpPawns();
	UFUNCTION(BlueprintCallable)		void ServerSetViewTarget(AActor* Target);
	UFUNCTION(BlueprintCallable)		void ServerChangeToSpectatingState();
	UFUNCTION(BlueprintCallable)		void ServerAdminFreeCam(AActor* OldTarget);
	UFUNCTION(BlueprintCallable)		void ServerAdminViewPlayer(AActor* NewTarget);
	UFUNCTION(BlueprintCallable)		void LogTeam();
	UFUNCTION(BlueprintCallable)		void ServerLogTeam();
	UFUNCTION(BlueprintCallable)		void ServerLogTeamStructure();
	UFUNCTION(BlueprintCallable)		void Query();
	UFUNCTION(BlueprintCallable)		bool CanServerQuery();
	UFUNCTION(BlueprintCallable)		void ServerQuery();
	UFUNCTION(BlueprintCallable)		void printInfo();
	UFUNCTION(BlueprintCallable)		bool useTriggered(AActor* A);
	UFUNCTION(BlueprintCallable)		void ChangeActionStatus(uint8 Action);
	UFUNCTION(BlueprintCallable)		void HealSelf();
	UFUNCTION(BlueprintCallable)		void ServerHealSelf();
	UFUNCTION(BlueprintCallable)		void Action();
	UFUNCTION(BlueprintCallable)		void CanTakeAction();
	UFUNCTION(BlueprintCallable)		void getZoomActionDistance();
	UFUNCTION(BlueprintCallable)		void getMaxDistance(AActor* Other);
	UFUNCTION(BlueprintCallable)		void ValidateClientActionOn(AActor* Other);
	UFUNCTION(BlueprintCallable)		void TryZoomActionTrace();
	UFUNCTION(BlueprintCallable)		void TryWeaponTargetTrace();
	UFUNCTION(BlueprintCallable)		void TryJavelinTargetTrace();
	UFUNCTION(BlueprintCallable)		void ServerAction(AActor* Other);
	UFUNCTION(BlueprintCallable)		void SearchForPickup(int32 Distance);
	UFUNCTION(BlueprintCallable)		void ManualTrace(int32 Distance);
	UFUNCTION(BlueprintCallable)		bool DoHighlight(AActor* A);
	UFUNCTION(BlueprintCallable)		bool RememberActor(AActor* A);
	UFUNCTION(BlueprintCallable)		void getValidActorDistance(AActor* Other);
	UFUNCTION(BlueprintCallable)		void CanIDActor(AActor* Other, float hit_distance_sq);
	UFUNCTION(BlueprintCallable)		void getValidActorDistanceWeaponTarget(AActor* Other);
	UFUNCTION(BlueprintCallable)		void CanIDWeaponTarget(AActor* Other, float hit_distance_sq);
	UFUNCTION(BlueprintCallable)		void OverrideActionTrace(AActor* A);
	UFUNCTION(BlueprintCallable)		void ActionTrace(FVector EndTrace, FVector StartTrace, FVector HitLocation);
	UFUNCTION(BlueprintCallable)		void AutoTrace();
	UFUNCTION(BlueprintCallable)		void ClearActorID();
	UFUNCTION(BlueprintCallable)		void TryToIDWeaponTarget(AActor* A);
	UFUNCTION(BlueprintCallable)		void TryToIDJavelinTarget(AActor* A);
	UFUNCTION(BlueprintCallable)		void TryToIDActor(AActor* A);
	UFUNCTION(BlueprintCallable)		void ServerTrackESSObjectSeen(AAGP_Objective* agpobjSeen);
	UFUNCTION(BlueprintCallable)		void TryToIDObjective(AActor* A, bool bDeepTrace);
	UFUNCTION(BlueprintCallable)		void TryToIDPawn(AActor* A, bool bDeepTrace);
	UFUNCTION(BlueprintCallable)		void NotifyPromotion(bool bFTL, uint8 yFT);
	UFUNCTION(BlueprintCallable)		void NotifyNoScore(FName Reason);
	UFUNCTION(BlueprintCallable)		void SetSquadTarget();
	UFUNCTION(BlueprintCallable)		void ServerSetSquadTarget(int32 iTeamIndex, uint8 objnum);
	UFUNCTION(BlueprintCallable)		void CanCommo();
	UFUNCTION(BlueprintCallable)		void CommoCycle();
	UFUNCTION(BlueprintCallable)		void CommoSendMessage(int32 i);
	UFUNCTION(BlueprintCallable)		void CommoMode(ECommoType Type);
	//UFUNCTION(BlueprintCallable)		void CommoSend(class<CommoLocalMessage>  CommoType, int32 i);
	//UFUNCTION(BlueprintCallable)		void CommoPlayAnim(class<CommoLocalMessage>  CommoType, int32 i);
	UFUNCTION(BlueprintCallable)		void CheckRIFlood();
	UFUNCTION(BlueprintCallable)		void ReportIn();
	UFUNCTION(BlueprintCallable)		void ServerReportIn();
	UFUNCTION(BlueprintCallable)		void ClientESSNotifyAdminMessage(FString sString);
	UFUNCTION(BlueprintCallable)		void ClientESSConsoleMessage(FString sString);
	UFUNCTION(BlueprintCallable)		void SetDelayReport(float NextReportInSeconds);
	UFUNCTION(BlueprintCallable)		void ESSObjectiveReport();
	UFUNCTION(BlueprintCallable)		void ServerESSObjectiveReport(AAGP_Objective* agpobj);
	UFUNCTION(BlueprintCallable)		void ESSRadioResponse();
	UFUNCTION(BlueprintCallable)		void CoopESSRadioResponse();
	UFUNCTION(BlueprintCallable)		void ClientESSRadioInvestigateOrder(USoundBase* sndESSObjectiveRadioAcknowledgement);
	UFUNCTION(BlueprintCallable)		void ClientCoopESSRadioInvestigateOrder(USoundBase* sndESSRadioAcknowledgement);
	UFUNCTION(BlueprintCallable)		void ClientESSRadioSuccessMessage(USoundBase* sndESSObjectiveCompletionAcknowledgement);
	UFUNCTION(BlueprintCallable)		void ClientESSPlayIntroduction(USoundBase* sndIntro);
	UFUNCTION(BlueprintCallable)		void StartMantle();
	UFUNCTION(BlueprintCallable)		void IsTeammateInjured();
	UFUNCTION(BlueprintCallable)		void CallMedic();
	UFUNCTION(BlueprintCallable)		void ServerCallMedic();
	UFUNCTION(BlueprintCallable)		void Say(FString Msg);
	UFUNCTION(BlueprintCallable)		void TeamSay(FString Msg);
	UFUNCTION(BlueprintCallable)		void DevSay(FString Msg);
	UFUNCTION(BlueprintCallable)		void CSay(FString sMsg);
	UFUNCTION(BlueprintCallable)		void CSayNotify(FString sMsg);
	UFUNCTION(BlueprintCallable)		void PlayerList();
	UFUNCTION(BlueprintCallable)		void ReasonList();
	UFUNCTION(BlueprintCallable)		FString GetReason(int32 i);
	UFUNCTION(BlueprintCallable)		FString AppendSpaces(FString append, int32 spaces);
	UFUNCTION(BlueprintCallable)		void MaybeGetPlayerNameFromID(FString PlayerName);
	UFUNCTION(BlueprintCallable)		void GetPlayerFromID(int32 iPlayerID);
	UFUNCTION(BlueprintCallable)		void DevKick(FString PlayerName);
	UFUNCTION(BlueprintCallable)		void ServerDevKick(FString PlayerName);
	UFUNCTION(BlueprintCallable)		void SUToggle();
	UFUNCTION(BlueprintCallable)		void ParseNameAndReason(FString Input, FString PlayerName, int32 iReason);
	UFUNCTION(BlueprintCallable)		void votekick(FString Input);
	UFUNCTION(BlueprintCallable)		void ClientShowVotekickInstructions();
	UFUNCTION(BlueprintCallable)		void ServerVoteKick(FString PlayerName, int32 iReason);
	UFUNCTION(BlueprintCallable)		void ServerSay(FString Msg, FName Type);
	UFUNCTION(BlueprintCallable)		FString StripBadCodes(FString InString);
	UFUNCTION(BlueprintCallable)		FString StripColorCodes(FString InString);
	UFUNCTION(BlueprintCallable)		bool GetLanguageFilter();						//From Object
	UFUNCTION(BlueprintCallable)		FString FilterLanguage(FString S);
	UFUNCTION(BlueprintCallable)		FString FilterAlways(FString S);
	UFUNCTION(BlueprintCallable)		FString ApplyFilters(FString S);
	UFUNCTION(BlueprintCallable)		void SubstituteKeyNames(FString S);
	UFUNCTION(BlueprintCallable)		void TeamMessage(AAA2_PlayerState* PRI, FString S, FName Type);
	UFUNCTION(BlueprintCallable)		void old_SelectTeam();
	UFUNCTION(BlueprintCallable)		void old_ClientTeamSelectMenu(bool bOpen);
	UFUNCTION(BlueprintCallable)		void ClientTeamSelectMenu(bool bOpen);
	UFUNCTION(BlueprintCallable)		void SelectTeam(FString Param2);
	UFUNCTION(BlueprintCallable)		void OLD_SelectClass();
	UFUNCTION(BlueprintCallable)		void SelectClass(FString Param2);
	UFUNCTION(BlueprintCallable)		bool CanShowRoster();
	UFUNCTION(BlueprintCallable)		bool CanShowWeaponClass();
	UFUNCTION(BlueprintCallable)		void ShowScores(FString Param2);
	UFUNCTION(BlueprintCallable)		void ShowMap(FString Param2);
	UFUNCTION(BlueprintCallable)		void ShowObjectives(FString Param2);
	UFUNCTION(BlueprintCallable)		void ShowServerInfo(FString Param2);
	UFUNCTION(BlueprintCallable)		void ShowTournament(FString Param2);
	UFUNCTION(BlueprintCallable)		void ShowSurvey(FString Param2);
	UFUNCTION(BlueprintCallable)		bool CanShowScores();
	UFUNCTION(BlueprintCallable)		void CanSelectTeam();
	UFUNCTION(BlueprintCallable)		void CanSelectClass();
	UFUNCTION(BlueprintCallable)		bool CanShowServerInfo();
	UFUNCTION(BlueprintCallable)		void ShowMenu();
	UFUNCTION(BlueprintCallable)		void RequestMedic(bool bMedic);
	UFUNCTION(BlueprintCallable)		void ServerRequestMedic(bool bMedic);
	UFUNCTION(BlueprintCallable)		void ClientNotifyMedic(bool bMedic);
	UFUNCTION(BlueprintCallable)		void SetPreferredClass(int32 i, bool bAvoidLeader, bool bMedic, int32 prev_i, bool prev_b);
	UFUNCTION(BlueprintCallable)		void ClientForceNewClass(FString ClassName);
	UFUNCTION(BlueprintCallable)		bool QualifiedFor(AActor*  Desired);
	UFUNCTION(BlueprintCallable)		ASoldierClass* GetDesiredTeamClass();
	UFUNCTION(BlueprintCallable)		void ServerSetDesiredTeamClass(int32 i, bool bAvoidLeader, bool bMedic);
	UFUNCTION(BlueprintCallable)		void ServerEnablePlayer();
	UFUNCTION(BlueprintCallable)		void NotifyPendingTeamChange(uint8 NewTeam, bool bForceNotify);
	UFUNCTION(BlueprintCallable)		void NotifyPBAuthMessage(FString Msg);
	UFUNCTION(BlueprintCallable)		void ClientNotifyAdminMessage(FString sMsg);
	UFUNCTION(BlueprintCallable)		void ServerSendClientNotifyAdminMessage(AAA2_PlayerState* priPlayer, FString sMsg);
	UFUNCTION(BlueprintCallable)		void ToggleNotificationMessages();
	UFUNCTION(BlueprintCallable)		void NotifyAdminMessage(FString Msg);
	UFUNCTION(BlueprintCallable)		void LoadJacket();
	UFUNCTION(BlueprintCallable)		void SaveJacket();
	UFUNCTION(BlueprintCallable)		void VerifyJacket();
	UFUNCTION(BlueprintCallable)		void LimitPawnRotation(bool bLimit, FRotator rRotator);
	UFUNCTION(BlueprintCallable)		void bind(FString Command);
	UFUNCTION(BlueprintCallable)		void QueryServerList();
	UFUNCTION(BlueprintCallable)		void QueryServerListReply(int32 Index, FString Section, FString Setting, FString Value, int32 Type);
	UFUNCTION(BlueprintCallable)		FString GetServerSection(int32 Index);
	UFUNCTION(BlueprintCallable)		void SetServerSetting(int32 Index, FString Value);
	UFUNCTION(BlueprintCallable)		void SetServerSettingReply(int32 Index, FString Value);
	UFUNCTION(BlueprintCallable)		void KickPlayer(FString PlayerName);
	UFUNCTION(BlueprintCallable)		void BanPlayer(FString PlayerName);
	UFUNCTION(BlueprintCallable)		void MutePlayer(FString PlayerName);
	UFUNCTION(BlueprintCallable)		int32 GetServerSettingsCount();
	UFUNCTION(BlueprintCallable)		FString GetServerKey(int32 Index);
	UFUNCTION(BlueprintCallable)		void SetServerKey(int32 Index, FString Key);
	UFUNCTION(BlueprintCallable)		FString GetServerKeyValue(int32 Index);
	UFUNCTION(BlueprintCallable)		void SetServerKeyValue(int32 Index, FString Value);
	UFUNCTION(BlueprintCallable)		void RefreshServerInfo(bool bInitialize);
	UFUNCTION(BlueprintCallable)		void LoadPSettings();
	UFUNCTION(BlueprintCallable)		void SavePSettings();
	UFUNCTION(BlueprintCallable)		void ParsePC(FString sString);
	UFUNCTION(BlueprintCallable)		void ClientSetPMessage(int32 messID);
	UFUNCTION(BlueprintCallable)		void ServerSetPC(bool bNS);
	UFUNCTION(BlueprintCallable)		void LoadServerCommands(FString Filename);
	UFUNCTION(BlueprintCallable)		void SaveServerCommands(FString Filename);
	UFUNCTION(BlueprintCallable)		void ParseServerCommands(FString sString);
	UFUNCTION(BlueprintCallable)		void ServerSetAutoSwapFromGrenade(bool bstatus);
	UFUNCTION(BlueprintCallable)		void ServerSetAutoWalkZoom(bool bstatus);
	UFUNCTION(BlueprintCallable)		void SetTurret(AActor* A);
	UFUNCTION(BlueprintCallable)		void ClientSetTurret(AActor* A);
	UFUNCTION(BlueprintCallable)		void SetCamera(AActor* C, UTexture2D* Overlay);
	UFUNCTION(BlueprintCallable)		void ClientSetCamera(AActor* C, UTexture2D* Overlay);
	UFUNCTION(BlueprintCallable)		void SetCamOverlay(UTexture2D* Overlay);
	UFUNCTION(BlueprintCallable)		void ServerAbortViewCam();
	//UFUNCTION(BlueprintCallable)		void PreClientTravel();															// Already exists in PlayerController with different def
	UFUNCTION(BlueprintCallable)		void DisplayLevelLoading();
	UFUNCTION(BlueprintCallable)		void ClientTriggerCommandPost();
	UFUNCTION(BlueprintCallable)		void AdminForceClassAllPlayers(FString WhichClass);
	UFUNCTION(BlueprintCallable)		void AdminForceClass(FString Who, FString WhichClass);
	UFUNCTION(BlueprintCallable)		void ServerAdminCommand(FString Cmd, FString Arg0AsPlayerName, FString Arguments);
	UFUNCTION(BlueprintCallable)		void AdminSpectate(FString argument);
	UFUNCTION(BlueprintCallable)		void IsServerSetting(FString Section, FString Setting, FString Value);
	UFUNCTION(BlueprintCallable)		void Admin(FString CommandLine);
	UFUNCTION(BlueprintCallable)		void GetAuthUserName();
	UFUNCTION(BlueprintCallable)		bool TournamentIsTournament();
	UFUNCTION(BlueprintCallable)		void TournamentGetTeamPasswordFor(int32 iTeamIndex);
	UFUNCTION(BlueprintCallable)		void TournamentJoinTeam(int32 iTeamIndex, FString sPassword);
	UFUNCTION(BlueprintCallable)		void TournamentServerJoinTeam(int32 iTeamIndex, FString sPassword);
	UFUNCTION(BlueprintCallable)		void TournamentServerAdminAssignPlayerToTeam(int32 iTeamIndex, AAA2_PlayerState* PRI);
	UFUNCTION(BlueprintCallable)		void TournamentNotifyPlayerJoinedTeam(int32 iTeamIndex, bool bResult, bool bAdminAssigned);
	UFUNCTION(BlueprintCallable)		void TournamentJoinSpectatorTeam(int32 iTeamIndex);
	UFUNCTION(BlueprintCallable)		void TournamentServerJoinSpectatorTeam(int32 iTeamIndex);
	UFUNCTION(BlueprintCallable)		void TournamentNotifyPlayerJoinedSpectatorTeam(int32 iTeamIndex, bool bResult, FString sReason);
	UFUNCTION(BlueprintCallable)		void TournamentAssignClass(FString sPlayerName, int32 iUnitID, int32 iSlot);
	UFUNCTION(BlueprintCallable)		void TournamentRemoveClass(FString sPlayerName, int32 iUnitID, int32 iSlot);
	UFUNCTION(BlueprintCallable)		void TournamentServerAssignClass(AAA2_PlayerState* PRI, int32 iUnitID, int32 iSlot);
	UFUNCTION(BlueprintCallable)		void TournamentServerRemoveClass(AAA2_PlayerState* PRI, int32 iUnitID, int32 iSlot);
	UFUNCTION(BlueprintCallable)		void NotifyTournamentTeamNameUpdated(int32 iTeamIndex, FString sTeamName);
	UFUNCTION(BlueprintCallable)		void TournamentSetTeamName(int32 iTeam, FString sTeamName);
	UFUNCTION(BlueprintCallable)		void TournamentServerSetTeamName(int32 iTeam, FString sTeamName);
	UFUNCTION(BlueprintCallable)		void TournamentNotifyNewTeamName();
	UFUNCTION(BlueprintCallable)		void NotifyTeamCaptainRequestStatus(bool bTeamCaptain);
	UFUNCTION(BlueprintCallable)		void TournamentRequestTeamCaptain(AAA2_PlayerState* PRI);
	UFUNCTION(BlueprintCallable)		void TournamentServerRequestTeamCaptain(AAA2_PlayerState* PRI);
	UFUNCTION(BlueprintCallable)		void TournamentNotifyNewTeamCaptain();
	UFUNCTION(BlueprintCallable)		bool TournamentAreAllWeaponClassesAvailable();
	UFUNCTION(BlueprintCallable)		void TournamentCaptainLockWeaponClasses(bool fLock);
	UFUNCTION(BlueprintCallable)		void TournamentServerCaptainLockWeaponClasses(AAA2_PlayerState* PRI, bool fLock);
	UFUNCTION(BlueprintCallable)		void TournamentNotifyNewWeaponClassLockState();
	UFUNCTION(BlueprintCallable)		void TournamentTeamReady(bool bReady);
	UFUNCTION(BlueprintCallable)		void TournamentNotifyMyTeamReady();
	UFUNCTION(BlueprintCallable)		void TournamentNotifyOtherTeamReady();
	UFUNCTION(BlueprintCallable)		void TournamentAdminReady();
	UFUNCTION(BlueprintCallable)		void TournamentWarmupJustEnded();
	UFUNCTION(BlueprintCallable)		void TournamentIsPasswordRequired(int32 iTeamIndex);
	UFUNCTION(BlueprintCallable)		void TournamentAreCaptainsAllowed();
	UFUNCTION(BlueprintCallable)		void TournamentAreTeamPasswordsRequired();
	UFUNCTION(BlueprintCallable)		void TournamentIsTeamCaptainSelected(int32 iTeamNum);
	UFUNCTION(BlueprintCallable)		void TournamentIsTeamRosterLocked(int32 iTeamNum);
	UFUNCTION(BlueprintCallable)		void TournamentIsTeamReady(int32 iTeamNum);
	UFUNCTION(BlueprintCallable)		void TournamentIsOtherTeamCaptainSelected();
	UFUNCTION(BlueprintCallable)		void TournamentIsOtherTeamRosterLocked();
	UFUNCTION(BlueprintCallable)		void TournamentIsOtherTeamReady();
	UFUNCTION(BlueprintCallable)		void TournamentIsMyTeamCaptainSelected();
	UFUNCTION(BlueprintCallable)		void TournamentIsMyTeamRosterLocked();
	UFUNCTION(BlueprintCallable)		void TournamentIsMyTeamReady();
	UFUNCTION(BlueprintCallable)		void GetTeamName(int32 iTeamNum);
	UFUNCTION(BlueprintCallable)		void GetOtherTeamName();
	UFUNCTION(BlueprintCallable)		void GetMyTeamName();
	UFUNCTION(BlueprintCallable)		void TournamentAreAllWeaponClassSlotsOpen();
	UFUNCTION(BlueprintCallable)		void TournamentGetTournamentState();
	UFUNCTION(BlueprintCallable)		void TournamentRequestSwapSides();
	UFUNCTION(BlueprintCallable)		void TournamentRequestStartWarmup();
	UFUNCTION(BlueprintCallable)		void TournamentRequestPauseTournament();
	UFUNCTION(BlueprintCallable)		void TournamentRequestPause(AAA2_PlayerState* PRI);
	UFUNCTION(BlueprintCallable)		void TournamentResume();
	UFUNCTION(BlueprintCallable)		void TournamentRestartMatch();
	UFUNCTION(BlueprintCallable)		void TournamentRestartTournament();
	UFUNCTION(BlueprintCallable)		void Suicide();
	UFUNCTION(BlueprintCallable)		void TournamentClientRunSuicide();
	UFUNCTION(BlueprintCallable)		void TournamentTryToSuicidePlayer();
	UFUNCTION(BlueprintCallable)		void TournamentTeamList(int32 iTeam);
	UFUNCTION(BlueprintCallable)		void TournamentOpenResultsFile(FString sBaseFileName, FString Message);
	UFUNCTION(BlueprintCallable)		void TournamentWriteResultsFile(FString sTournamentResults);
	UFUNCTION(BlueprintCallable)		void TournamentCloseResultsFile();
	UFUNCTION(BlueprintCallable)		void TMAssignClass(int32 iUnitID, int32 iSlot, FString sPlayerName);
	UFUNCTION(BlueprintCallable)		void TMRemoveClass(int32 iUnitID, int32 iSlot, FString sPlayerName);
	UFUNCTION(BlueprintCallable)		void TMSetTeamName(int32 iTeam, FString sTeamName);
	UFUNCTION(BlueprintCallable)		void TMTeamList(int32 iTeam);
	UFUNCTION(BlueprintCallable)		void TMTeamReady();
	UFUNCTION(BlueprintCallable)		void TMAdminReady();
	UFUNCTION(BlueprintCallable)		void TMRequestTeamCaptain();
	UFUNCTION(BlueprintCallable)		void TMJoinTeam(int32 iTeam, FString sPassword);
	UFUNCTION(BlueprintCallable)		void TMPauseTournament();
	UFUNCTION(BlueprintCallable)		void TMResume();
	UFUNCTION(BlueprintCallable)		void TMSwapSides();
	UFUNCTION(BlueprintCallable)		void TMRestartMatch();
	UFUNCTION(BlueprintCallable)		void TMRestartTournament();
	UFUNCTION(BlueprintCallable)		void TMRestartMatchWithMissionPlanning();
	UFUNCTION(BlueprintCallable)		void TMHelp();
	UFUNCTION(BlueprintCallable)		void RunServer(FString ServerExecutable, FString ServerType, FString MapName, FString LogFile, FString INIfile, bool bShutDown);
	UFUNCTION(BlueprintCallable)		int32 NumSupportStrikesAvailable();
	UFUNCTION(BlueprintCallable)		int32 SupportArrivalTime();
	UFUNCTION(BlueprintCallable)		bool IsSupportAvailable();
	UFUNCTION(BlueprintCallable)		bool IsSupportReady();
	UFUNCTION(BlueprintCallable)		bool IsSupportFiring();
	UFUNCTION(BlueprintCallable)		ACallForSupport* GetSupport();
	UFUNCTION(BlueprintCallable)		void RequestForSupport();
	UFUNCTION(BlueprintCallable)		void ConfirmReqestForSupport();
	UFUNCTION(BlueprintCallable)		bool CanCallForSupport();
	UFUNCTION(BlueprintCallable)		void CallForSupport(FVector StrikeLocation, FVector StrikeNormal);
	UFUNCTION(BlueprintCallable)		void ServerCallForSupport(FVector StrikeLocation, FVector StrikeNormal);
	UFUNCTION(BlueprintCallable)		void SetScopeDetailLevel(FString S);
	UFUNCTION(BlueprintCallable)		FString GetScopeDetailLevel();
	UFUNCTION(BlueprintCallable)		void SetScopeDetail(FString S);
	UFUNCTION(BlueprintCallable)		EScopeDetail GetScopeDetail();
	UFUNCTION(BlueprintCallable)		void ServerSetScopeDetail(EScopeDetail newDetail);
	UFUNCTION(BlueprintCallable)		void NeedNetNotify();
	UFUNCTION(BlueprintCallable)		void RunInputCommand(FString Cmd);
	UFUNCTION(BlueprintCallable)		void LoadSRGrammar(FString Grammar);
	UFUNCTION(BlueprintCallable)		void LoadSRBinds(FString Filename, FString OutFilename);
	UFUNCTION(BlueprintCallable)		void SaveSRBinds(FString Filename);
	UFUNCTION(BlueprintCallable)		void GetSRBind(FString Alias);
	UFUNCTION(BlueprintCallable)		void SetSRBind(FString Alias, FString BindPhrase);
	UFUNCTION(BlueprintCallable)		void SetGrammar();
	UFUNCTION(BlueprintCallable)		void ResetGrammar();
	UFUNCTION(BlueprintCallable)		void VoiceCommand(FString RecognizedString, FString RawString);
	UFUNCTION(BlueprintCallable)		void PostNetReceive();
	UFUNCTION(BlueprintCallable)		void AutoJoinVoiceChat();
	UFUNCTION(BlueprintCallable)		void ServerChatDebug();
	UFUNCTION(BlueprintCallable)		void MatchStarting();
	UFUNCTION(BlueprintCallable)		void MatchEnding();
	UFUNCTION(BlueprintCallable)		int32 CalculateUserNameChecksum(FString sUserName);
	UFUNCTION(BlueprintCallable)		void strip(FString str, int32 atleast);
	UFUNCTION(BlueprintCallable)		void IsArgument(FString S, FString argument, FString Option);
	UFUNCTION(BlueprintCallable)		void MPCheat(FString cheat);
	UFUNCTION(BlueprintCallable)		void MPCheat_FOV(float F);
	UFUNCTION(BlueprintCallable)		void MPCheat_ActorList();
	UFUNCTION(BlueprintCallable)		void MPCheat_DActorList();
	UFUNCTION(BlueprintCallable)		void MPCheat_FreeCamera(bool B);
	UFUNCTION(BlueprintCallable)		void MPCheat_Behindview(bool B);
	UFUNCTION(BlueprintCallable)		void MPCheat_PlayerLock(bool B);
	UFUNCTION(BlueprintCallable)		void MPCheat_SceneJump(FString SceneName);
	UFUNCTION(BlueprintCallable)		void MPCheat_Params(FString Params);
	UFUNCTION(BlueprintCallable)		void MPCheat_Slomo(float t);
	UFUNCTION(BlueprintCallable)		void MPCheat_Pause(bool bPause);
	UFUNCTION(BlueprintCallable)		void MPCheat_EndGame();
	UFUNCTION(BlueprintCallable)		void MPCheat_Flood();
	UFUNCTION(BlueprintCallable)		void MPCheat_NVG();
	UFUNCTION(BlueprintCallable)		void MPCheat_Binoc(uint8 new_binoc);
	UFUNCTION(BlueprintCallable)		void MPCheat_Medic(int32 new_num_med);
	UFUNCTION(BlueprintCallable)		void MPCheat_SuperGod();
	UFUNCTION(BlueprintCallable)		void MPCheat_God();
	UFUNCTION(BlueprintCallable)		void MPCheat_EnterGhostMode();
	UFUNCTION(BlueprintCallable)		void MPCheat_Walk();
	UFUNCTION(BlueprintCallable)		void newTeamClass(ASoldierClass*  sclass);
	UFUNCTION(BlueprintCallable)		void MPCheat_ChangeClass(FString ClassName);
	UFUNCTION(BlueprintCallable)		void ELCheat(FString cheat);
	UFUNCTION(BlueprintCallable)		void addDebug(EDebugTag Debug);
	UFUNCTION(BlueprintCallable)		void removeDebug(EDebugTag Debug);
	UFUNCTION(BlueprintCallable)		void toggleDebug(EDebugTag Debug);
	UFUNCTION(BlueprintCallable)		void SToggleDebug(EDebugTag Debug);
	UFUNCTION(BlueprintCallable)		void ServerToggleDebug(EDebugTag Debug);
	UFUNCTION(BlueprintCallable)		void AIDebug();
	UFUNCTION(BlueprintCallable)		void AimDebug();
	UFUNCTION(BlueprintCallable)		void RecoilDebug();
	UFUNCTION(BlueprintCallable)		void FireModeDebug();
	UFUNCTION(BlueprintCallable)		void PostureDebug();
	UFUNCTION(BlueprintCallable)		void GrenadeDebug();
	UFUNCTION(BlueprintCallable)		void MantleDebug();
	UFUNCTION(BlueprintCallable)		void ZoomDebug();
	UFUNCTION(BlueprintCallable)		void HumanAccuracy();
	UFUNCTION(BlueprintCallable)		void TracerDebug();
	UFUNCTION(BlueprintCallable)		void ParachuteDebug();
	UFUNCTION(BlueprintCallable)		void ScreenplayDebug();
	UFUNCTION(BlueprintCallable)		void FallingDebug();
	UFUNCTION(BlueprintCallable)		void MisfireDebug();
	UFUNCTION(BlueprintCallable)		void WeaponStateDebug();
	UFUNCTION(BlueprintCallable)		void PawnStateDebug();
	UFUNCTION(BlueprintCallable)		void ControllerStateDebug();
	UFUNCTION(BlueprintCallable)		void WeaponAccDebug();
	UFUNCTION(BlueprintCallable)		void InventoryDebug();
	UFUNCTION(BlueprintCallable)		void AGPHUD(bool B);
	UFUNCTION(BlueprintCallable)		void HideObjectives();
	UFUNCTION(BlueprintCallable)		void ToggleObjectiveDisplay();
	UFUNCTION(BlueprintCallable)		void ToggleSAIDisplay();
	UFUNCTION(BlueprintCallable)		void HideCompassObjPoints(bool B);
	UFUNCTION(BlueprintCallable)		void ToggleDebugCE();
	UFUNCTION(BlueprintCallable)		void Logo();
	UFUNCTION(BlueprintCallable)		void SetTeam(uint8 Index);
	UFUNCTION(BlueprintCallable)		void Reload();
	UFUNCTION(BlueprintCallable)		void ServerWantsToReload();
	UFUNCTION(BlueprintCallable)		void ClientWantsToReload();
	UFUNCTION(BlueprintCallable)		void FixJam();
	UFUNCTION(BlueprintCallable)		void SetHUDColor(uint8 H);
	UFUNCTION(BlueprintCallable)		void SetHUDAlpha(uint8 A);
	UFUNCTION(BlueprintCallable)		void SetHUDCrosshair(uint8 C);
	UFUNCTION(BlueprintCallable)		void NextCrosshair();
	UFUNCTION(BlueprintCallable)		void ChangeWpnPosX(float pos);
	UFUNCTION(BlueprintCallable)		void ChangeWpnPosY(float pos);
	UFUNCTION(BlueprintCallable)		void ChangeWpnPosZ(float pos);
	UFUNCTION(BlueprintCallable)		void ChangeWpnScale(float fScale);
	UFUNCTION(BlueprintCallable)		void ChangeWpnFOV(float new_fov);
	UFUNCTION(BlueprintCallable)		void DoFade(bool FadeIn, bool Black, float Time, float percentage);

	void DisplayDebug(UCanvas* Canvas, const class FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos);

	UFUNCTION(BlueprintCallable)		void AutoTraceDebug();
	UFUNCTION(BlueprintCallable)		void PermaTraceDebug();
	UFUNCTION(BlueprintCallable)		void DumpControllers();
	UFUNCTION(BlueprintCallable)		bool DebugSwapPickups();
	UFUNCTION(BlueprintCallable)		void PrintShoot();
	UFUNCTION(BlueprintCallable)		void ServerPrintShoot();
	UFUNCTION(BlueprintCallable)		void ServerDebugPrintShoot();
	UFUNCTION(BlueprintCallable)		void DebugSetDebugIcons(int32 OnOrOff);
	UFUNCTION(BlueprintCallable)		void PanicBullet();
	UFUNCTION(BlueprintCallable)		void PanicCrack();
	UFUNCTION(BlueprintCallable)		void SS();
	UFUNCTION()							void SetCheatMonitor(UScriptObject* mon);
	UFUNCTION(BlueprintCallable)		void PwnBeta(FString sBetaName);
	UFUNCTION(BlueprintCallable)		void ServerAttachItem(FString sPlayerName, FString sTheItem);
	//UFUNCTION(BlueprintCallable)		void RequestBanList(XInterface.GUIPage guipCP);
	UFUNCTION(BlueprintCallable)		void ServerRequestBanList();
	UFUNCTION(BlueprintCallable)		void ClientSendBanlistEntry(FString sBanee, FString sBanDetails);
	UFUNCTION(BlueprintCallable)		void ClientEnableLocalCheats();
	UFUNCTION(BlueprintCallable)		void DisableLocalCheats();
	UFUNCTION(BlueprintCallable)		void ClientDisableLocalCheats(bool bCheatServerStatus);
	UFUNCTION(BlueprintCallable)		void ClientUpdateForceclassing(bool bAllowForceclassing, bool bShowNotificationMessage);
	UFUNCTION(BlueprintCallable)		void ServerSetINISetting(FString sINIValue);
	UFUNCTION(BlueprintCallable)		void MakeMeAdmin();
	UFUNCTION(BlueprintCallable)		void CustomCheat(FString sCheat);
	UFUNCTION(BlueprintCallable)		void ChangeAdminPW(FString sNewPW);
	UFUNCTION(BlueprintCallable)		void AddPlayerAdmin(FString sName, FString sPassword);
	UFUNCTION(BlueprintCallable)		void ServerModifyPRI(FString sCommand);
	//UFUNCTION(BlueprintCallable)		void RequestServerINISetting(XInterface.GUIPage guipCP, FString sPanelName, FString sINIVariable);
	UFUNCTION(BlueprintCallable)		void ServerRequestINISetting(FString sPanelName, FString sINIVariable);
	UFUNCTION(BlueprintCallable)		void ClientNotifyRequestINISetting(FString sPanelName, FString sINIVariable, FString sINIValue);
	UFUNCTION(BlueprintCallable)		void ShowAdminCommandPost();
	//UFUNCTION(BlueprintCallable)		void RequestPBSetting(XInterface.GUIPage guipCP, FString sPanelName, FString sPBVariable);
	UFUNCTION(BlueprintCallable)		void ServerRequestPBSetting(FString sPanelName, FString sPBVariable);
	UFUNCTION(BlueprintCallable)		void DisplayScore();
	UFUNCTION(BlueprintCallable)		void ServerDisplayPlayerScore();
	UFUNCTION(BlueprintCallable)		void ChangeServerToTournamentMode();
	UFUNCTION(BlueprintCallable)		void ChangeServerToStandardMode();
	UFUNCTION(BlueprintCallable)		void ServerSetTournamentINITeamName(int32 iTeam, FString sTeamName);
	UFUNCTION(BlueprintCallable)		void ServerUpdateActiveTournamentField(FString sFieldName, FString sValue);
	UFUNCTION(BlueprintCallable)		void ServerSetTournamentINITeamPassword(int32 iTeam, FString sTeamPassword);
	UFUNCTION(BlueprintCallable)		void TournamentCaptainAdminMessage(FString sMsg);
	UFUNCTION(BlueprintCallable)		void TournamentRequestDeadRound();
	UFUNCTION(BlueprintCallable)		void HelpDebug();
	UFUNCTION(BlueprintCallable)		void HelpPlayerAdmin();
	UFUNCTION(BlueprintCallable)		void Help();
	UFUNCTION(BlueprintCallable)		void CallForFireHelp();
	UFUNCTION(BlueprintCallable)		void FDCOnMap();
	UFUNCTION(BlueprintCallable)		bool UAVOnMap();
	UFUNCTION(BlueprintCallable)		void CFFPolarSuppressInfantry();
	UFUNCTION(BlueprintCallable)		void CFFPolarSuppressVehicle();
	UFUNCTION(BlueprintCallable)		void CFFPolarSuppressVehicles();
	UFUNCTION(BlueprintCallable)		void CFFPolarSmoke();
	UFUNCTION(BlueprintCallable)		void CallForFirePolar(int32 iDistanceInMeters, FString sMissionType, FString sTargetType);
	UFUNCTION(BlueprintCallable)		void CallForFireGrid(int32 iGridX, int32 iGridY, FString sMissionType, FString sTargetType);
	UFUNCTION(BlueprintCallable)		void RadarMapGridToWorldVector(int32 iGridRow, int32 iGridCol);
	UFUNCTION(BlueprintCallable)		void ServerCallForFireGrid(int32 iGridX, int32 iGridY, int32 iBaseX, int32 iBaseY, FString sMissionType, FString sTargetType);
	UFUNCTION(BlueprintCallable)		void CFFCorrection(float fpDistanceInMeters, FString sMissionType, FString sTargetType);
	UFUNCTION(BlueprintCallable)		void CFFFire();
	UFUNCTION(BlueprintCallable)		void CFFEnd();
	UFUNCTION(BlueprintCallable)		void CFFRepeat();
	UFUNCTION(BlueprintCallable)		void CFFLeft();
	UFUNCTION(BlueprintCallable)		void CFFRight();
	UFUNCTION(BlueprintCallable)		void CFFReset();
	UFUNCTION(BlueprintCallable)		void CFFAdd();
	UFUNCTION(BlueprintCallable)		void CFFDrop();
	UFUNCTION(BlueprintCallable)		void CFFDisplaySpotterTools();
	UFUNCTION(BlueprintCallable)		void CFFAdjustFire(FString sDirection, int32 iDistance);
	UFUNCTION(BlueprintCallable)		void CFFCancel();
	UFUNCTION(BlueprintCallable)		void CFFCheckFire();
	UFUNCTION(BlueprintCallable)		void DebugDisableNPCLogging();
	UFUNCTION(BlueprintCallable)		void DebugEnableNPCLogging(FString sDebugType, FString sTag);
	UFUNCTION(BlueprintCallable)		void DebugFocusOff();
	UFUNCTION(BlueprintCallable)		void DebugFocusOnTarget();
	UFUNCTION(BlueprintCallable)		void DebugToggleDebugLoggingOnTarget(FString sType);
	UFUNCTION(BlueprintCallable)		void DebugCurrentViewTarget();
	UFUNCTION(BlueprintCallable)		void DebugServerProfiling(FString sProfileCommand);
	UFUNCTION(BlueprintCallable)		void CommandCivilian(FString sCmd);
	UFUNCTION(BlueprintCallable)		void AdminSetNPCToPlayerRatio(float fpRatio);
	UFUNCTION(BlueprintCallable)		void AdminSetMaxSoldiers(int32 iMaxSoldiers);
	UFUNCTION(BlueprintCallable)		void DebugDumpAIStats();
	UFUNCTION(BlueprintCallable)		void DebugMoveToAI(FString sIndex);
	UFUNCTION(BlueprintCallable)		void DebugDumpServerDynamicActors();
	UFUNCTION(BlueprintCallable)		void DebugDumpServerStats();
	UFUNCTION(BlueprintCallable)		void DebugForceAIAnimState();
	UFUNCTION(BlueprintCallable)		void DebugAICombatInfo(FString sInfoType);
	UFUNCTION(BlueprintCallable)		void DebugUpdateNPCDebuggingInfo();
	UFUNCTION(BlueprintCallable)		void DebugClientUpdateNPCDebuggingInfo(FString sNewNPCDebuggingInfo);
	UFUNCTION(BlueprintCallable)		void DebugGotoLocation(FString sLocX, FString sLocY, FString sLocZ);
	UFUNCTION(BlueprintCallable)		void ServerRequestStat(FString sStatRequested);
	UFUNCTION(BlueprintCallable)		void ClientStatInfo(FString sStatRequested, FString sStatValue);
	UFUNCTION(BlueprintCallable)		void DHHelp();
	UFUNCTION(BlueprintCallable)		void DHLandHere();
	UFUNCTION(BlueprintCallable)		void DHNextWaypoint();
	UFUNCTION(BlueprintCallable)		void DHPatrol();
	UFUNCTION(BlueprintCallable)		void DHSetMechanicalFailure(FString sType, float fpChance);
	UFUNCTION(BlueprintCallable)		void DHHover();
	UFUNCTION(BlueprintCallable)		void DHTakeOff();
	UFUNCTION(BlueprintCallable)		void DHVH(bool bThirdPersonView);
	UFUNCTION(BlueprintCallable)		void UAVCameraView();
	//UFUNCTION(BlueprintCallable)		void ClientUAVCameraView(Vehicle vhUAVFound);
	UFUNCTION(BlueprintCallable)		void UAVStart(FString sNPCTag);
	UFUNCTION(BlueprintCallable)		void UAVView(FString sNPCTag, bool bThirdPersonView);
	UFUNCTION(BlueprintCallable)		void UAVFindViewUAV();
	UFUNCTION(BlueprintCallable)		void UAVServerHeadForPlayer();
	UFUNCTION(BlueprintCallable)		void UAVServerCircleHere();
	UFUNCTION(BlueprintCallable)		void UAVServerTurnRight();
	UFUNCTION(BlueprintCallable)		void UAVServerTurnLeft();
	UFUNCTION(BlueprintCallable)		void UAVServerClimb();
	UFUNCTION(BlueprintCallable)		void UAVServerDescend();
	UFUNCTION(BlueprintCallable)		void UAVServerSpeedUp();
	UFUNCTION(BlueprintCallable)		void UAVSpawn();
	UFUNCTION(BlueprintCallable)		void UAVLaunch();
	UFUNCTION(BlueprintCallable)		void UAVServerSlowDown();
	UFUNCTION(BlueprintCallable)		void DHViewHelicopter(FString sNPCTag, bool bThirdPersonView);
	UFUNCTION(BlueprintCallable)		void DHFindViewHelicopter(FString sNPCTag);
	UFUNCTION(BlueprintCallable)		void DHViewNormal();
	UFUNCTION(BlueprintCallable)		void ReplaceCommandString(FString Text);
	UFUNCTION(BlueprintCallable)		void GetCommandKey(FString cmdname);
	UFUNCTION(BlueprintCallable)		void MaybeDelaySpawn();
	UFUNCTION(BlueprintCallable)		void MaybeEnterPlayerWalkingState();
	UFUNCTION(BlueprintCallable)		void ServerSpamLog();
	UFUNCTION(BlueprintCallable)		void DemoRecToggleSound();
	UFUNCTION(BlueprintCallable)		void DemoRecToggleMuzzleFlash();
	UFUNCTION(BlueprintCallable)		void DumpRelevantAI();
	UFUNCTION(BlueprintCallable)		void ServerDumpRelevantAI();
	UFUNCTION(BlueprintCallable)		void DumpPathList(bool bDumpPaths);
	UFUNCTION(BlueprintCallable)		void TriggerClientEvent(FName EventName);
	UFUNCTION(BlueprintCallable)		void StatIncMissionAttempts();
	UFUNCTION(BlueprintCallable)		void StatIncMissionFailures();
	UFUNCTION(BlueprintCallable)		void StatIncMissionSuccesses();
	UFUNCTION(BlueprintCallable)		void StatIncObjectives();
	UFUNCTION(BlueprintCallable)		void StatMissionFailureTime(int32 Time);
	UFUNCTION(BlueprintCallable)		void StatMissionSuccessTime(int32 Time);
	UFUNCTION(BlueprintCallable)		void StatMissionProgressTime(int32 Time);
	UFUNCTION(BlueprintCallable)		void StatMissionTotalPlayers(int32 TotalPlayers);
	UFUNCTION(BlueprintCallable)		void StatMissionPlayersSurviving(int32 PlayersSurviving);
	UFUNCTION(BlueprintCallable)		void StatIncObjectReported();
	UFUNCTION(BlueprintCallable)		void StatIncObjectExaminedByOtherPlayer();
	UFUNCTION(BlueprintCallable)		void StatIncObjectDiscoveryRadioed();
	UFUNCTION(BlueprintCallable)		void StatIncNoRadioExaminedObject();
	UFUNCTION(BlueprintCallable)		void StatIncPostRadioExaminedObject();
	UFUNCTION(BlueprintCallable)		void StatIncPostRadioLinkedObjectTaken();
	UFUNCTION(BlueprintCallable)		void StatIncNoRadioLinkedObjectTaken();
	UFUNCTION(BlueprintCallable)		void StatIncObjectReportable();
	UFUNCTION(BlueprintCallable)		void StatIncLethalObject();
	UFUNCTION(BlueprintCallable)		void StatIncNonLethalObject();
	UFUNCTION(BlueprintCallable)		void StatReportableLethalObjects(int32 NumObjects);
	UFUNCTION(BlueprintCallable)		void StatReportableNonLethalObjects(int32 NumObjects);
	UFUNCTION(BlueprintCallable)		void StatListUnreportedLocations(FString List);
	UFUNCTION(BlueprintCallable)		void StatIncObjectReportingErrors();
	UFUNCTION(BlueprintCallable)		void StatIncObjectUnnecessaryUse();
	UFUNCTION(BlueprintCallable)		void StatListObjectDistribution(FString List);
	UFUNCTION(BlueprintCallable)		void StatIncShotsFired();
	UFUNCTION(BlueprintCallable)		void StatIncShotsHit();
	UFUNCTION(BlueprintCallable)		void StatIncHeadshots();
	UFUNCTION(BlueprintCallable)		void StatTotalDamage(int32 NewDamage);
	UFUNCTION(BlueprintCallable)		void StatIncDamageInstances();
	UFUNCTION(BlueprintCallable)		void StatEnemyContactTime(float Seconds);
	UFUNCTION(BlueprintCallable)		void StatSurvivingAI(int32 NumAIs);
	UFUNCTION(BlueprintCallable)		void StatIncTotalDeaths();
	UFUNCTION(BlueprintCallable)		void StatIncDeathByAI();
	UFUNCTION(BlueprintCallable)		void StatIncDeathByFriendlyFire();
	UFUNCTION(BlueprintCallable)		void StatIncDeathByObject();
	UFUNCTION(BlueprintCallable)		void StatListDeathLocations(FString List);
	UFUNCTION(BlueprintCallable)		void StatLifeDuration(int32 Duration);
	UFUNCTION(BlueprintCallable)		void StatIncTotalInjuries();
	UFUNCTION(BlueprintCallable)		void StatIncTotalInjuriesByAI();
	UFUNCTION(BlueprintCallable)		void StatIncTotalInjuriesByFriendlyFire();
	UFUNCTION(BlueprintCallable)		void StatIncTotalInjuriesByObject();
	UFUNCTION(BlueprintCallable)		void StatListInjuryLocations(FString List);
	UFUNCTION(BlueprintCallable)		void StatIncFriendlyFire();
	UFUNCTION(BlueprintCallable)		void StatIncFriendlyFireDeaths();
	UFUNCTION(BlueprintCallable)		void StatIncCivilianHits();
	UFUNCTION(BlueprintCallable)		void StatIncCivilianDeaths();
	UFUNCTION(BlueprintCallable)		void StatIncCivilianDeathsByIED();
	UFUNCTION(BlueprintCallable)		void LogES2Stats();

	//From Controller
	UFUNCTION(BlueprintCallable)		bool PbCanPlayerJoin();


	//From PlayerController/Controller
	UFUNCTION(BlueprintCallable)		void ClientCloseMenu(bool bCloseAll, bool bCancel);
	UFUNCTION(BlueprintCallable)		bool IsPBEnabled();

	//From PlayerController
	void ClientSetScoreMode(bool bAllowsLocalScore);

	void WaitForMover(AMover* M);


	UPROPERTY()					bool bNPCReported;								//var bool bNPCReported;
	UPROPERTY()					float fpWaitingForDelayedGrenade;				//var float fpWaitingForDelayedGrenade;
	UPROPERTY(globalconfig)		bool bDisableES2RadioMessages;					//var globalconfig bool bDisableES2RadioMessages;
	UPROPERTY(globalconfig)		bool bDisableES2Introduction;					//var globalconfig bool bDisableES2Introduction;
	UPROPERTY(globalconfig)		bool bShowDelayedStartWarningMessage;			//var globalconfig bool bShowDelayedStartWarningMessage;
	//UPROPERTY()				NPCBaseController* LastReportableNPC;		//var NPCBaseController LastReportableNPC;
	UPROPERTY()					bool bESSIntroPlayed;							//var bool bESSIntroPlayed;
	UPROPERTY()					USoundBase* sndESSFoundItemAcknowledgement;		//var Sound sndESSFoundItemAcknowledgement;
	UPROPERTY()					TArray<AAGP_Objective*> aagpobjSeen;			//var array<AGP_Objective> aagpobjSeen;
	UPROPERTY()					AAGP_Objective* abpobjESSLastSeen;				//var AGP_Objective abpobjESSLastSeen;
	UPROPERTY()					bool bCFFDisableLaser;							//var bool bCFFDisableLaser;
	UPROPERTY()					bool bCFFShowSpotterToolMenu;					//var bool bCFFShowSpotterToolMenu;
	UPROPERTY()					bool bCFFTrainingRoundsOnly;					//var bool bCFFTrainingRoundsOnly;
	UPROPERTY()					bool bCFFTrainingDisableCFF;					//var bool bCFFTrainingDisableCFF;
	UPROPERTY()					bool bCFFTrainingGridOnly;						//var bool bCFFTrainingGridOnly;
	UPROPERTY()					int32 iSpotterShiftAddDrop;						//var int iSpotterShiftAddDrop;
	UPROPERTY()					int32 iSpotterShiftLeftRight;					//var int iSpotterShiftLeftRight;
	UPROPERTY()					int32 iSpotterPolarRangeSetting;				//var int iSpotterPolarRangeSetting;
	UPROPERTY()					bool bMortarSpotter;							//var bool bMortarSpotter;
	UPROPERTY()					bool bUAVNavigator;								//var bool bUAVNavigator;
	//UPROPERTY()				AAGP_HUD agphudOrg;							//var AGP_HUD agphudOrg;
	//UPROPERTY()				AVehicle vehUAV;							//var Vehicle vehUAV;
	UPROPERTY()					float afpTimePlayedPercent;						//var float afpTimePlayedPercent;
	UPROPERTY()					int32 iKillsAtLastRound;						//var int iKillsAtLastRound;
	UPROPERTY()					int32 iWinsAtLastRound;							//var int iWinsAtLastRound;
	UPROPERTY()					int32 iAIDifficultyRoundsDataIndex;				//var int iAIDifficultyRoundsDataIndex;
	UPROPERTY()					float fpLastRoundLength;						//var float fpLastRoundLength;
	UPROPERTY()					float fpTimePlayedLastRound;					//var float fpTimePlayedLastRound;
	UPROPERTY()					float afpSkillPerRound;							//var float afpSkillPerRound;
	UPROPERTY()					int32 iLastAIViewedIndex;						//var int iLastAIViewedIndex;
	UPROPERTY()					float NoSuicideVelocity;						//var float NoSuicideVelocity;
	UPROPERTY()					FString sNPCDebuggingInfo;						//var string sNPCDebuggingInfo;
	//UPROPERTY()				ANPCBaseSoldierController* npcbscDebugging;	//var NPCBaseSoldierController npcbscDebugging;
	UPROPERTY()					TArray<FESSObjectData> FoundESSObject;		//var array<ESSObjectData> FoundESSObject;
	UPROPERTY()					TArray<FEnemySpottedData> EnemiesSpotted;		//var array<EnemySpottedData> EnemiesSpotted;
	UPROPERTY(globalconfig)		bool bRealHeroesVisited;						//var globalconfig bool bRealHeroesVisited;
	UPROPERTY()					bool bDontLockAfterMisionComplete;				//var bool bDontLockAfterMisionComplete;
	UPROPERTY()					ESwapType SwapType;								//var ESwapType SwapType;
	UPROPERTY()					bool bWaitingForDelayedGrenade;					//var bool bWaitingForDelayedGrenade;
	UPROPERTY(globalconfig)		bool bRadarShowPlayerInfoElevation;				//var globalconfig bool bRadarShowPlayerInfoElevation;
	UPROPERTY(globalconfig)		bool bRadarShowPlayerInfoNames;					//var globalconfig bool bRadarShowPlayerInfoNames;
	UPROPERTY(globalconfig)		bool bRadarShowPlayerInfo;						//var globalconfig bool bRadarShowPlayerInfo;
	UPROPERTY()					int32 RadarZoomLevelIndex;						//var int RadarZoomLevelIndex;
	UPROPERTY()					bool bFullsizeRadar;							//var bool bFullsizeRadar;
	UPROPERTY()					float RadarZoom;								//var float RadarZoom;
	UPROPERTY()					bool bPlayerIsReadyToPlay;						//var bool bPlayerIsReadyToPlay;
	UPROPERTY()					APawn* pawnPlayersDeadBody;						//var Pawn pawnPlayersDeadBody;
	//UPROPERTY()				AGUIPage guipStats;							//var XInterface.GUIPage guipStats;
	//UPROPERTY()				AGUIPage guipCommandPost;					//var XInterface.GUIPage guipCommandPost;
	UPROPERTY()					UScriptObject* _CheatMonitor;				//var ScriptObject _CheatMonitor;
	UPROPERTY(config)			bool bAutoDemoRec;								//var config bool bAutoDemoRec;
	UPROPERTY(config)			bool bDebuggingVoiceChat;						//var config bool bDebuggingVoiceChat;
	UPROPERTY()					bool bWaitingForVRI;							//var bool bWaitingForVRI;
	UPROPERTY()					bool bWaitingForPRI;							//var bool bWaitingForPRI;
	UPROPERTY()					float LastKickWarningTime;						//var float LastKickWarningTime;
	UPROPERTY(globalconfig)		int32 MaxRecentServers;							//var globalconfig int MaxRecentServers;
	UPROPERTY(globalconfig)		TArray<FString> RecentServers;					//var globalconfig array<String> RecentServers;
	UPROPERTY(globalconfig)		TArray<FString> RejoinChannels;					//var transient globalconfig array<String> RejoinChannels;
	UPROPERTY()					FString sFailReason;							//var string sFailReason;
	UPROPERTY()					bool bAuthDisabledForAccount;					//var bool bAuthDisabledForAccount;
	UPROPERTY()					int32 iPBWaitMessageIndex;						//var int iPBWaitMessageIndex;
	UPROPERTY()					int32 iPBWaitTimer;								//var int iPBWaitTimer;
	UPROPERTY()					bool bPBChecked;								//var bool bPBChecked;
	UPROPERTY()					int32 iCDG;										//var int iCDG;
	UPROPERTY()					int32 iCDAction;								//var int iCDAction;
	UPROPERTY()					bool fCD2;										//var bool fCD2;
	UPROPERTY()					bool fCD1;										//var bool fCD1;
	UPROPERTY()					float fpCDTime;									//var float fpCDTime;
	UPROPERTY()					float fpCADelayTime;							//var float fpCADelayTime;
	UPROPERTY()					int32 iUNC;										//var int iUNC;
	UPROPERTY()					float fLastNameTest;							//var float fLastNameTest;
	UPROPERTY()					bool bLostViewTarget;							//var bool bLostViewTarget;
	UPROPERTY()					float TurretBeginTime;							//var float TurretBeginTime;
	UPROPERTY()					float TurretEndTime;							//var float TurretEndTime;
	UPROPERTY()					UMaterialInstance* LaserDotOverlay;				//var Material LaserDotOverlay;
	UPROPERTY()					TArray<FLaserDotInfo> LaserDots;				//var array<LaserDotInfo> LaserDots;
	UPROPERTY()					UTexture2D* HUDCamOverlay;						//var Material HUDCamOverlay;
	UPROPERTY()					FString SelectedWeaponSlot;						//var string SelectedWeaponSlot;
	UPROPERTY()					TArray<FString> WM_Slot;								//var string WM_Slot;
	UPROPERTY()					FString WM_CurrentWeapon;						//var string WM_CurrentWeapon;
	UPROPERTY(globalconfig)		FString OpFace;									//var globalconfig string OpFace;
	UPROPERTY(globalconfig)		FString Face;									//var globalconfig string Face;
	UPROPERTY()					ESkinPreference SkinPreference;					//var ESkinPreference SkinPreference;
	UPROPERTY()					bool bNoSniper;									//var bool bNoSniper;
	UPROPERTY()					FString ParentPassword;							//var string ParentPassword;
	UPROPERTY()					AActor* RemoteCamera;							//var Actor RemoteCamera;
	UPROPERTY()					int32 origFOV;									//var int origFOV;
	UPROPERTY()					int32 turretFOV;								//var() int turretFOV;
	UPROPERTY()					AFixedWeaponAttachment* Turret;					//var FixedWeaponAttachment Turret;
	UPROPERTY()					float NextWarmupAllowed;						//var float NextWarmupAllowed;
	UPROPERTY()					float NextRestartAllowed;						//var float NextRestartAllowed;
	UPROPERTY()					float NextSwapAllowed;							//var float NextSwapAllowed;
	UPROPERTY()					float NextPauseAllowed;							//var float NextPauseAllowed;
	UPROPERTY()					int32 nIdleRounds;								//var int nIdleRounds;
	UPROPERTY()					bool bTestedIdleRounds;							//var bool bTestedIdleRounds;
	UPROPERTY()					float NextIdleCheck;							//var float NextIdleCheck;
	UPROPERTY()					float LastMovedTime;							//var float LastMovedTime;
	UPROPERTY()					uint8 bIdleWarning;								//var byte bIdleWarning;
	UPROPERTY()					bool bNotIdle;									//var bool bNotIdle;
	UPROPERTY()					FRotator IdleRotation;							//var Object.Rotator IdleRotation;
	UPROPERTY()					FVector IdleLocation;							//var FVector IdleLocation;
	UPROPERTY()					bool bSpectateBodies;							//var bool bSpectateBodies;
	UPROPERTY()					bool bSpectateFirstPersonOnly;					//var bool bSpectateFirstPersonOnly;
	UPROPERTY()					bool bSpectatePlayersOnly;						//var bool bSpectatePlayersOnly;
	UPROPERTY()					bool bETATrackingUsed;							//var bool bETATrackingUsed;
	UPROPERTY(globalconfig)		FString sETAUserSelectedSurName;				//var globalconfig string sETAUserSelectedSurName;
	UPROPERTY(globalconfig)		FString sETAUserSelectedNickName;				//var globalconfig string sETAUserSelectedNickName;
	UPROPERTY()					bool bExploreTheArmyServer;						//var bool bExploreTheArmyServer;
	UPROPERTY()					bool bServerRequiresAuthorization;				//var bool bServerRequiresAuthorization;
	UPROPERTY()					bool bIsAuthorizedServer;						//var bool bIsAuthorizedServer;
	UPROPERTY()					bool bUltimateArenaServer;						//var bool bUltimateArenaServer;
	UPROPERTY()					bool bTournamentServer;							//var bool bTournamentServer;
	UPROPERTY()					bool bNATOServer;								//var bool bNATOServer;
	UPROPERTY()					bool bUnofficialServer;							//var bool bUnofficialServer;
	UPROPERTY()					bool bOfficialServer;							//var bool bOfficialServer;
	UPROPERTY()					bool bLeasedServer;								//var bool bLeasedServer;
	UPROPERTY()					bool bBetaServer;								//var bool bBetaServer;
	UPROPERTY()					bool bDevMode;									//var bool bDevMode;
	UPROPERTY()					bool bCheatServer;								//var bool bCheatServer;
	UPROPERTY()					bool bSpecNightVision;							//var bool bSpecNightVision;
	UPROPERTY()					float fLastFlashTime;							//var float fLastFlashTime;
	UPROPERTY()					FString sAuthClientTransmissionText;			//var string sAuthClientTransmissionText;
	UPROPERTY()					int32 iAuthClientTransmissionComplete;			//var int iAuthClientTransmissionComplete;
	UPROPERTY()					bool bMissionPass;								//var bool bMissionPass;
	UPROPERTY()					TArray<FString> asAuthMissionData;				//var string asAuthMissionData;
	UPROPERTY()					int32 iAuthMissionDataFields;					//var int iAuthMissionDataFields;
	UPROPERTY()					int32 iMission;									//var int iMission;
	UPROPERTY()					int32 iTour;									//var int iTour;
	UPROPERTY()					AAGP_ServerInfo* ServerInfo;					//var AGP_ServerInfo ServerInfo;
	//UPROPERTY()				AuthSurvey CurrentSurvey;						//var Actor.AuthSurvey CurrentSurvey;
	UPROPERTY(globalconfig)		FString sNewsLine4;								//var globalconfig string sNewsLine4;
	UPROPERTY(globalconfig)		FString sNewsLine3;								//var globalconfig string sNewsLine3;
	UPROPERTY(globalconfig)		FString sNewsLine2;								//var globalconfig string sNewsLine2;
	UPROPERTY(globalconfig)		FString sNewsLine1;								//var globalconfig string sNewsLine1;
	UPROPERTY(globalconfig)		int32 iNewsID;									//var globalconfig int iNewsID;
	UPROPERTY(globalconfig)		bool bAutoSortServerList;						//var globalconfig bool bAutoSortServerList;
	UPROPERTY(globalconfig)		FString SkinTonePref;							//var globalconfig string SkinTonePref;
	UPROPERTY(globalconfig)		uint8 HUDCrosshair;								//var globalconfig byte HUDCrosshair;
	UPROPERTY(globalconfig)		uint8 HUDColor;									//var globalconfig byte HUDColor;
	UPROPERTY(globalconfig)		uint8 HUDAlpha;									//var globalconfig byte HUDAlpha;
	UPROPERTY(globalconfig)		bool bFlushOnRoundRestart;						//var globalconfig bool bFlushOnRoundRestart;
	UPROPERTY()					bool bDebugSwapPickups;							//var bool bDebugSwapPickups;
	UPROPERTY()					bool bCheatVerbose;								//var bool bCheatVerbose;
	UPROPERTY()					bool bCheatNoFade;								//var bool bCheatNoFade;
	UPROPERTY()					bool bShowErrorMessageLonger;					//var bool bShowErrorMessageLonger;
	UPROPERTY()					float tMedicFlood;								//var float tMedicFlood;
	UPROPERTY()					float fpLastViewChange;							//var float fpLastViewChange;
	UPROPERTY()					float tFlood;									//var float tFlood;
	UPROPERTY()					uint8 yFloodCount;								//var byte yFloodCount;
	UPROPERTY()					float fMsgDuration;								//var float fMsgDuration;
	UPROPERTY()					bool bPrintShootDebug;							//var bool bPrintShootDebug;
	UPROPERTY()					FString _AutoTraceString;						//var string _AutoTraceString;
	UPROPERTY()					APawn* _AnimPawn;								//var Pawn _AnimPawn;
	UPROPERTY()					bool _bPermaTraceDebug;							//var bool _bPermaTraceDebug;
	UPROPERTY()					bool _bAutoTraceDebug;							//var bool _bAutoTraceDebug;
	UPROPERTY()					FString BadHonorUpdateValue;					//var string BadHonorUpdateValue;
	UPROPERTY()					FString BetaServer;								//var string BetaServer;
	UPROPERTY()					FString ServerNotRegistered;					//var string ServerNotRegistered;
	UPROPERTY()					FString ResponseTimeOut;						//var string ResponseTimeOut;
	UPROPERTY()					FString UserIsBanned;							//var string UserIsBanned;
	UPROPERTY()					FString NoUserRecord;							//var string NoUserRecord;
	UPROPERTY()					FString WrongUserPassword;						//var string WrongUserPassword;
	UPROPERTY()					FString NeedUserPassword;						//var string NeedUserPassword;
	UPROPERTY()					FString EncryptedPassword;						//var string EncryptedPassword;
	UPROPERTY()					FAuthInt64 UserAuthID;							//var Actor.AuthInt64 UserAuthID;
	UPROPERTY()					FString bReadyForFinishPostLogin;				//var bool bReadyForFinishPostLogin;
	UPROPERTY()					bool bPostLoginComplete;						//var bool bPostLoginComplete;
	UPROPERTY()					bool bReceivedAuthRequest;						//var bool bReceivedAuthRequest;
	UPROPERTY()					FString SystemLanguage;							//var string SystemLanguage;
	UPROPERTY(globalconfig)		bool bAutoLoad;									//var globalconfig bool bAutoLoad;
	UPROPERTY(globalconfig)		bool bDontRememberUsernameAndPassword;			//var globalconfig bool bDontRememberUsernameAndPassword;
	UPROPERTY()					FString sSavedUserPassword;						//var string sSavedUserPassword;
	UPROPERTY()					FString UserPassword;							//var string UserPassword;
	UPROPERTY(globalconfig)		FString LANPlayerName;							//var globalconfig string LANPlayerName;
	UPROPERTY(globalconfig)		FString sSavedUserName;							//var globalconfig string sSavedUserName;
	UPROPERTY()					FString UserName;								//var string UserName;
	UPROPERTY(globalconfig)		EScopeDetail ScopeDetail;						//var globalconfig EScopeDetail ScopeDetail;
	UPROPERTY(globalconfig)		bool bNoClientSideEffects;						//var globalconfig bool bNoClientSideEffects;
	UPROPERTY()					float _GrenadeSoundIntensity;					//var float _GrenadeSoundIntensity;
	UPROPERTY()					float _GrenadeSoundUpdate;						//var float _GrenadeSoundUpdate;
	UPROPERTY()					float _GrenadeSoundTime;						//var float _GrenadeSoundTime;
	UPROPERTY()					USoundBase* GrenadeDistortionFade;				//var Sound GrenadeDistortionFade;
	UPROPERTY()					USoundBase* GrenadeDistortion;					//var Sound GrenadeDistortion;
	UPROPERTY()					float _FlashSoundIntensity;						//var float _FlashSoundIntensity;
	UPROPERTY()					float _FlashSoundUpdate;						//var float _FlashSoundUpdate;
	UPROPERTY()					float _FlashSoundTime;							//var float _FlashSoundTime;
	UPROPERTY()					USoundBase* FlashBangDistortionFade;			//var Sound FlashBangDistortionFade;
	UPROPERTY()					USoundBase* FlashBangDistortion;				//var Sound FlashBangDistortion;
	UPROPERTY()					USoundBase* sndCoopESSFoundItemSound;			//var Sound sndCoopESSFoundItemSound;
	UPROPERTY()					FString stCoopESSFoundItemText;					//var string stCoopESSFoundItemText;
	UPROPERTY()					float NextReportAllowedIn;						//var float NextReportAllowedIn;
	UPROPERTY()					float fLevelTime;								//var float fLevelTime;
	UPROPERTY()					float fTime;									//var float fTime;
	UPROPERTY()					bool bLookingAtZombieObject;					//var bool bLookingAtZombieObject;
	UPROPERTY()					int32 ViewSkipRotationCount;					//var int ViewSkipRotationCount;
	UPROPERTY()					int32 ViewSkipLocationCount;					//var int ViewSkipLocationCount;
	UPROPERTY()					FRotator LastViewRotation;						//var Object.Rotator LastViewRotation;
	UPROPERTY()					FVector LastViewLocation;						//var FVector LastViewLocation;
	UPROPERTY()					FVector HitShakeVector;							//var FVector HitShakeVector;
	UPROPERTY()					int32 HitShakeRate;								//var int HitShakeRate;
	UPROPERTY()					int32 HitShakeOffset;							//var int HitShakeOffset;
	UPROPERTY()					int32 HitShakeMin;								//var int HitShakeMin;
	UPROPERTY()					int32 HitShakeMax;								//var int HitShakeMax;
	UPROPERTY()					float _GrenadeShakeUpdate;						//var float _GrenadeShakeUpdate;
	UPROPERTY()					float _GrenadeShakeTime;						//var float _GrenadeShakeTime;
	UPROPERTY()					UCamEffect_FlashBang* _FlashEffect;				//var CamEffect_FlashBang _FlashEffect;
	UPROPERTY()					AActor* ViewTargetActor;						//var Actor ViewTargetActor;
	UPROPERTY()					FString DesiredTeamClassName;					//var string DesiredTeamClassName;
	UPROPERTY()					ASoldierClass* DesiredTeamClass;				//var class<SoldierClass> DesiredTeamClass;
	UPROPERTY()					EStartupStage StartupStage;						//var AGP_GameInfo.EStartupStage StartupStage;
	UPROPERTY()					bool bLatecomer;								//var bool bLatecomer;
	UPROPERTY()					bool bNoThrowWeapon;							//var bool bNoThrowWeapon;
	UPROPERTY()					int32 prevHealth;								//var int prevHealth;
	UPROPERTY()					int32 AutoTraceFrequency;						//var int AutoTraceFrequency;
	UPROPERTY()					int32 AutoTraceCount;							//var int AutoTraceCount;
	UPROPERTY()					int32 CommoSentText;							//var int CommoSentText;
	//UPROPERTY()				AUIHUDCompass* _cHUDCompass;					//var AGP_UI.UIHUDCompass _cHUDCompass;
	//UPROPERTY()				AHUDCommoInfo _cHUDCommoInfo;					//var HUDCommoInfo _cHUDCommoInfo;
	UPROPERTY()					FName BoundaryEvent;							//var name BoundaryEvent;
	UPROPERTY()					bool bBoundaryTrigger;							//var bool bBoundaryTrigger;
	UPROPERTY()					int32 _cBlue;									//var int _cBlue;
	UPROPERTY()					int32 _cGreen;									//var int _cGreen;
	UPROPERTY()					int32 _cRed;									//var int _cRed;
	UPROPERTY()					UTexture2D* _tPainOverlay;						//var Texture _tPainOverlay;
	UPROPERTY()					float _fDamageTime;								//var float _fDamageTime;
	UPROPERTY()					uint8 _SavedAmbientGlow;						//var byte _SavedAmbientGlow;
	UPROPERTY()					AActor* _LastGlowActor;							//var Actor _LastGlowActor;
	UPROPERTY()					float CurrentStrafe;							//var float CurrentStrafe;
	UPROPERTY()					float CurrentForward;							//var float CurrentForward;
	UPROPERTY()					bool bSavedWalkingState;						//var bool bSavedWalkingState;
	UPROPERTY(globalconfig)		bool bDisableAutoServerlistRetrieval;			//var globalconfig bool bDisableAutoServerlistRetrieval;
	UPROPERTY(globalconfig)		bool bDisableServerColorsInBrowser;				//var globalconfig bool bDisableServerColorsInBrowser;
	UPROPERTY()					bool bUseOverlayScopes;							//var bool bUseOverlayScopes;
	UPROPERTY(globalconfig)		bool bAutoWalkZoom;								//var globalconfig bool bAutoWalkZoom;
	UPROPERTY(globalconfig)		bool bAutoSwapFromGrenade;						//var globalconfig bool bAutoSwapFromGrenade;
	UPROPERTY(globalconfig)		bool bToggleLean;								//var globalconfig bool bToggleLean;
	UPROPERTY()					uint8 bLastLeanLeft;							//var input byte bLastLeanLeft;
	UPROPERTY()					uint8 bLeanLeft;								//var input byte bLeanLeft;
	UPROPERTY()					uint8 bLastLeanRight;							//var input byte bLastLeanRight;
	UPROPERTY()					uint8 bLeanRight;								//var input byte bLeanRight;

	//From PlayerController, Controller
	UPROPERTY()					uint8 bHealSelfAction;							//var input byte bHealSelfAction;
	UPROPERTY()					AAA2_PlayerState* PlayerReplicationInfo;		//var PlayerReplicationInfo PlayerReplicationInfo;
	UPROPERTY()					float _fFadePercentage;							//var float _fFadePercentage;
	UPROPERTY()					bool _bFirstFadeIn;								//var bool _bFirstFadeIn;
	UPROPERTY()					float _fFadeTime;								//var float _fFadeTime;
	UPROPERTY()					float _fFadeStartTime;							//var float _fFadeStartTime;
	UPROPERTY()					bool _bFadeBlack;								//var bool _bFadeBlack;
	UPROPERTY() 				bool _bFadeIn;									//var bool _bFadeIn;
	UPROPERTY() 				bool _bFade;									//var bool _bFade;
	UPROPERTY() 				bool bAllowScoreShown;							//var bool bAllowScoreShown;
	UPROPERTY() 				bool bCheatFlying;								//var bool bCheatFlying;
	UPROPERTY() 				bool bNativeBonus;								//var bool bNativeBonus;
	UPROPERTY() 				bool bNoWeaponPenalty;							//var bool bNoWeaponPenalty;
	UPROPERTY() 				bool bInvisible;								//var bool bInvisible;
	UPROPERTY() 				bool bFriendlyFireOff;							//var bool bFriendlyFireOff;
	UPROPERTY() 				bool bPerfectAccuracy;							//var bool bPerfectAccuracy;
	UPROPERTY() 				bool bUnlimitedAmmo;							//var bool bUnlimitedAmmo;
	UPROPERTY() 				bool bPatrolling;								//var bool bPatrolling;
	UPROPERTY() 				bool bSuperGodMode;								//var bool bSuperGodMode;
	UPROPERTY() 				bool bGodMode;									//var bool bGodMode;
	UPROPERTY()					bool bRadarIsVisible;							//var bool bRadarIsVisible;
	UPROPERTY(globalconfig)		bool bShowRadarBlinking;						//var globalconfig bool bShowRadarBlinking;
	UPROPERTY(globalconfig)		bool bHUDHideSupport;							//var globalconfig bool bHUDHideSupport;
	UPROPERTY(globalconfig)		bool bHUDHideRadar;								//var globalconfig bool bHUDHideRadar;
	UPROPERTY(globalconfig)		bool bHUDHideObjectives;						//var globalconfig bool bHUDHideObjectives;
	UPROPERTY(globalconfig)		bool bHUDHideTimer;								//var globalconfig bool bHUDHideTimer;
	UPROPERTY(globalconfig)		bool bHUDHideCompass;							//var globalconfig bool bHUDHideCompass;
	UPROPERTY(globalconfig)		bool bHUDHideOptics;							//var globalconfig bool bHUDHideOptics;
	UPROPERTY(globalconfig)		bool bHUDHideCombatEffect;						//var globalconfig bool bHUDHideCombatEffect;
	UPROPERTY(globalconfig)		bool bHUDHideHealth;							//var globalconfig bool bHUDHideHealth;
	UPROPERTY(globalconfig)		bool bHUDHideMedical;							//var globalconfig bool bHUDHideMedical;
	UPROPERTY(globalconfig)		bool bHUDHideGrenades;							//var globalconfig bool bHUDHideGrenades;
	UPROPERTY(globalconfig)		bool bHUDHideWeapon;							//var globalconfig bool bHUDHideWeapon;
	UPROPERTY(globalconfig)		bool bHUDHideWeaponStatus;						//var globalconfig bool bHUDHideWeaponStatus;
	UPROPERTY(globalconfig)		bool bHUDHideAmmoCount;							//var globalconfig bool bHUDHideAmmoCount;
	UPROPERTY(globalconfig)		bool bMenuRestricted;							//var globalconfig bool bMenuRestricted;
	UPROPERTY()					bool bFreeCamera;								//var bool bFreeCamera;
	UPROPERTY()					bool bBehindView;								//var bool bBehindView;
	UPROPERTY()					float DefaultFOV;								//var float DefaultFOV;
	UPROPERTY()					float DesiredFOV;								//var float DesiredFOV;
	UPROPERTY()					FString sKickReason;							//var string sKickReason;
	UPROPERTY()					bool bNoRoll;									//var bool bNoRoll;
	//Already defined
	UPROPERTY()					int32 iPBEnabled;								//var int iPBEnabled;
	UPROPERTY()					int32 iUID;										//var int iUID;
	UPROPERTY()					int32 iRifleRangeRating;						//var int iRifleRangeRating;
	UPROPERTY()					TArray<int32> iCompleted;						//var int32 iCompleted[33];																		// index 0 = tours, index 1-32 = missions in each tour
	//UPROPERTY()		 	AAGP_HUD* MyHUD;									//var HUD myHUD;

	//From PlayerController
	UPROPERTY()				int32 PlayerStatsIndex;
	UPROPERTY()				bool bEnabled;
	UPROPERTY()				int32 TeamNumber;
	UPROPERTY()				bool bIsPlayer;
	UPROPERTY()				EViewPreference ViewPreference;						//var EViewPreference ViewPreference;
	UPROPERTY()				uint8 bTurn180;
	UPROPERTY()				uint8 bFire;
	UPROPERTY()				uint8 bAltFire;
	UPROPERTY()				uint8 bAction;
	UPROPERTY()				FString AuthErrorMessage1;							//var string AuthErrorMessage1;
	UPROPERTY()				FString AuthErrorMessage2;							//var string AuthErrorMessage2;
	UPROPERTY()				FString AuthErrorURL1;								//var string AuthErrorURL1;
	UPROPERTY()				FString AuthErrorURL2;								//var string AuthErrorURL2;

	int32 GetTeamNum();

	//From Controller:
	void SwitchToBestWeapon();
	void ClientSwitchToBestWeapon();
	void ClientSetWeapon(AWeapon* WeaponClass);
	bool ShouldRenderWeapon();

	//From PlayerController:
	bool CanUseWeapon(int32 DesiredAction);

	void ServerUpdateSelfHealActionState(bool bState);
	void SetFromAuthJacket(FAuthJacket Jacket);
	FString AuthJacketToString(FAuthJacket Jacket);





	//from Object
	bool GetMilesOnly();
};
